{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/hexo-theme-material-1.5.2/source/css/disqus-proxy.css","path":"css/disqus-proxy.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/disqus-proxy.min.css","path":"css/disqus-proxy.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/duoshuo.css","path":"css/duoshuo.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/fontawesome.min.css","path":"css/fontawesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/gallery.min.css","path":"css/gallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/material-icons.css","path":"css/material-icons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify.css","path":"css/prettify.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify.min.css","path":"css/prettify.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/uc.css","path":"css/uc.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/bg.png","path":"img/bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/browserstack_logo.png","path":"img/browserstack_logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/upyun_logo.svg","path":"img/upyun_logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/js/Valine.min.js","path":"js/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/js/MathJax.js","path":"js/MathJax.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/js/hanabi-browser-bundle.js","path":"js/hanabi-browser-bundle.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/js/lsloader.js","path":"js/lsloader.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/js/lsloader.min.js","path":"js/lsloader.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/js/nprogress.js","path":"js/nprogress.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/js/prettify.min.js","path":"js/prettify.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/js/queue.js","path":"js/queue.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/js/queue.min.js","path":"js/queue.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/material.css","path":"css/material.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/material.min.css","path":"css/material.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/style.min.css","path":"css/style.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/daily_pic.png","path":"img/daily_pic.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/js/js.js","path":"js/js.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/js/js.min.js","path":"js/js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-cave-dark.min.css","path":"css/prettify/atelier-cave-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-cave-light.min.css","path":"css/prettify/atelier-cave-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-dune-dark.min.css","path":"css/prettify/atelier-dune-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-dune-light.min.css","path":"css/prettify/atelier-dune-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-estuary-dark.min.css","path":"css/prettify/atelier-estuary-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-estuary-light.min.css","path":"css/prettify/atelier-estuary-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-forest-dark.min.css","path":"css/prettify/atelier-forest-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-forest-light.min.css","path":"css/prettify/atelier-forest-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-heath-dark.min.css","path":"css/prettify/atelier-heath-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-heath-light.min.css","path":"css/prettify/atelier-heath-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-lakeside-dark.min.css","path":"css/prettify/atelier-lakeside-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-lakeside-light.min.css","path":"css/prettify/atelier-lakeside-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-plateau-dark.min.css","path":"css/prettify/atelier-plateau-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-plateau-light.min.css","path":"css/prettify/atelier-plateau-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-savanna-dark.min.css","path":"css/prettify/atelier-savanna-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-savanna-light.min.css","path":"css/prettify/atelier-savanna-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-seaside-dark.min.css","path":"css/prettify/atelier-seaside-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-seaside-light.min.css","path":"css/prettify/atelier-seaside-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-sulphurpool-dark.min.css","path":"css/prettify/atelier-sulphurpool-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-sulphurpool-light.min.css","path":"css/prettify/atelier-sulphurpool-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/github-v2.min.css","path":"css/prettify/github-v2.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/github.min.css","path":"css/prettify/github.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/hemisu-dark.min.css","path":"css/prettify/hemisu-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/hemisu-light.min.css","path":"css/prettify/hemisu-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/tomorrow-night-blue.min.css","path":"css/prettify/tomorrow-night-blue.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/tomorrow-night-bright.min.css","path":"css/prettify/tomorrow-night-bright.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/tomorrow-night-eighties.min.css","path":"css/prettify/tomorrow-night-eighties.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/tomorrow-night.min.css","path":"css/prettify/tomorrow-night.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/tomorrow.min.css","path":"css/prettify/tomorrow.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/tranquil-heart.min.css","path":"css/prettify/tranquil-heart.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/vibrant-ink.min.css","path":"css/prettify/vibrant-ink.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-bilibili.svg","path":"img/footer/footer_ico-bilibili.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-facebook.svg","path":"img/footer/footer_ico-facebook.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-github.svg","path":"img/footer/footer_ico-github.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-gplus.svg","path":"img/footer/footer_ico-gplus.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-instagram.svg","path":"img/footer/footer_ico-instagram.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-linkedin.svg","path":"img/footer/footer_ico-linkedin.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-telegram.svg","path":"img/footer/footer_ico-telegram.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-tumblr.svg","path":"img/footer/footer_ico-tumblr.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-twitter.svg","path":"img/footer/footer_ico-twitter.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-v2ex.svg","path":"img/footer/footer_ico-v2ex.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-weibo.svg","path":"img/footer/footer_ico-weibo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-zhihu.svg","path":"img/footer/footer_ico-zhihu.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-10.png","path":"img/random/material-10.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-12.png","path":"img/random/material-12.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-17.png","path":"img/random/material-17.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-19.png","path":"img/random/material-19.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-3.png","path":"img/random/material-3.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-4.png","path":"img/random/material-4.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-6.png","path":"img/random/material-6.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-9.png","path":"img/random/material-9.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-8.png","path":"img/random/material-8.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-1.png","path":"img/random/material-1.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-11.png","path":"img/random/material-11.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-13.png","path":"img/random/material-13.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-14.png","path":"img/random/material-14.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-15.png","path":"img/random/material-15.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-16.png","path":"img/random/material-16.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-18.png","path":"img/random/material-18.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-2.png","path":"img/random/material-2.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-7.png","path":"img/random/material-7.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-5.png","path":"img/random/material-5.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"c6a29f75c3bbb8ed94363e56fd7e4da95310d746","modified":1521447481194},{"_id":"source/CNAME","hash":"f57bca50f7786a3de5cbf9d162db903650d0ad75","modified":1521447481195},{"_id":"themes/hexo-theme-material-1.5.2/.DS_Store","hash":"928ea1a28fc02163f08222ca951824c54bfb36e9","modified":1521448254992},{"_id":"themes/hexo-theme-material-1.5.2/.eslintrc.json","hash":"83ddc0cdc18f28b967795b8dac0421a52cdf7ece","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/.gitignore","hash":"dd9e9495fc7ce09c026f7fdcef45cf8ddfde40d8","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/CONTRIBUTING.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/.travis.yml","hash":"10a09fe2b341ccad5b97d4bd9cc2c1c03e1863a3","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/CONTRIBUTING.zh-cn.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/LICENSE","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/README.md","hash":"408e36745a8aeb187a25f309752c5e7da66f7e67","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/_config.template.yml","hash":"909c9b66c782311a0fe16bca4e75dc13e1b289ea","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/_config.yaml","hash":"6dd600afb6c45689c4270aa56c24b72d35c89230","modified":1521448720624},{"_id":"themes/hexo-theme-material-1.5.2/contributing.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/lint.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/package.json","hash":"e00885ee25ac548685af9869cf4cf895118a744c","modified":1512153024000},{"_id":"source/_posts/about-compat.md","hash":"74a31bdd783ca5a56a584b3cf1a4dbd98ee1aea3","modified":1521447481195},{"_id":"source/_posts/about-intent.md","hash":"cc30e98e985b0d69ae16f3dd99fee7856d95f50c","modified":1521447481195},{"_id":"source/_posts/about-material-design-1.md","hash":"a405f084c695b1e87caed7f16680ef5aa4265ef0","modified":1521447481195},{"_id":"source/_posts/about-my-career-2016.md","hash":"eb1326d5bef7bca33723777b61efa655c6e02aed","modified":1521447481196},{"_id":"source/_posts/about-material-design-2.md","hash":"f0e2ca9710387c6ef83a64f5a73761999a7f3659","modified":1521447481196},{"_id":"source/_posts/additional-cursor.md","hash":"3869d298f224935aa671ed719ee8f1e517f91c77","modified":1521447481196},{"_id":"source/_posts/about-oreo-1.md","hash":"db1b5a6202c2c21d34733496c3244748ab28d1e9","modified":1521447481196},{"_id":"source/_posts/fileUri.md","hash":"c4a3c1b69c936d21b0d904af79f374e013a1e4d7","modified":1521447481197},{"_id":"source/_posts/html2original.md","hash":"ff477383bb57ad8e506cee366546224594b249c6","modified":1521447481197},{"_id":"source/resume/.DS_Store","hash":"3ed56465f43b76aa1c3d453fb7fafdfbdc8e5ff8","modified":1521447481197},{"_id":"source/resume/index.md","hash":"8256e648fd4ed87a35dcd41c76e131e585411b4e","modified":1521447481197},{"_id":"themes/hexo-theme-material-1.5.2/.github/ISSUE_TEMPLATE.md","hash":"52a733a4d2e21a9c4d719495a0353c6719484f9f","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/.github/PULL_REQUEST_TEMPLATE.md","hash":"f2a3a0b929c0909ab99c96fb82853c2c2d67961a","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/languages/ar.yml","hash":"472d71f052e08f3c03b15dd67d11ad41f2eee7bf","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/languages/de.yml","hash":"bce37d066ffa82f3e249d41d0ee883c913cc2c5f","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/languages/en.yml","hash":"b59136a1b4d0a77e550b0e7e2e430cac44230dd3","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/languages/es.yml","hash":"d35f5411bc87277cc2d3a58d9499ddb9cfd46f1b","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/languages/ja.yml","hash":"768b8330c9c73287efd475e68741ce4ebad29fd1","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/languages/fr.yml","hash":"f456cf31a72d97f2f18e3bb6cf735285d2b9d2c5","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/languages/ms.yml","hash":"237a39bbfcce33e7b918f6c5dc0f01bc79900262","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/languages/nl_NL.yml","hash":"b71e59807716185627d6b9b84e44a79401df639f","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/languages/pt-BR.yml","hash":"a070c2c4d0d3d54f8ca70513cff73c3f7c306db1","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/languages/ru.yml","hash":"fbff2cf48dbde45adcad781e2fd6c30b523a4ac1","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/languages/zh-CN.yml","hash":"c188cad1a16ab0651e2d2d03cb3fa79962cf65ff","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/languages/zh-TW.yml","hash":"ec55953f0330f81bf1ffb37ff34de258dfda642a","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/index.ejs","hash":"aca1abb741f891776913c8ea2e6ff626a0ea5736","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/layout.ejs","hash":"94f66850b815a262c0f8ff112a32a0a6f43066e3","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/post.ejs","hash":"4dd572a9e84f3a6baa5e3f16d270e58e3cd31a23","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/scripts/helper.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/Isolation-post_entry.ejs","hash":"134dc82320b7aed7d4d78960be63e16c5c4a30fb","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/Paradox-post-info.ejs","hash":"125cfa5cd9e6e1ca5e958026fdd42f3c3141e34f","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/Paradox-post-thumbnail.ejs","hash":"6f1e9a85c089ce98a36a2954839fb9ce3e53739e","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"4d740eba338517d4e10d011a157cdefad45a8e1f","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/Paradox-post_entry.ejs","hash":"5f4d67e5bd70f635203706cf344b036d891073e6","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/Paradox-search.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/blog_info.ejs","hash":"5e95796e6f9a81163554ca4198573860f7328d4e","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/comment.ejs","hash":"c9fb1f98a18ca484cb52d60e2ad2bad25b56dfb2","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/config_font.ejs","hash":"730abeb681758ce288d5541930c46bc4b041a0b1","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/daily_pic.ejs","hash":"e780fbdb79b5e27091c408545cfd5b64892c9b01","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/config_css.ejs","hash":"2b1e27faa0446a5e756e61ddf3e969e50948f1ce","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/footer-left.ejs","hash":"372cdf718e01fea2736b8e427e57bfcfaa8a557f","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/footer-option.ejs","hash":"be20394eaeaf2d20db28946b948962c839da6ea9","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/footer_top.ejs","hash":"9eaace4feb951c96c0033e7271497f3f300d2476","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/footer.ejs","hash":"530626c347882579d09d71df68993e25076ca8e2","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/head.ejs","hash":"8167f995c7cc21a6a8ddbfbdd03f2f74a7bd904d","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/import_js.ejs","hash":"961b8a0059875e4044fe80bbe91ca6a225f113e5","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/isolate-sns_list.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/isolate_info.ejs","hash":"b8ec76716bfa2e6513b4df6814fe8676536a94c1","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/post-header.ejs","hash":"b0b8973c48db6376a24d4b4b1d2eb15d18d6508c","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/post-content.ejs","hash":"ad626e3b60bc4a17bacff02cf9b0a8beaba2ad1e","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/post-info-share.ejs","hash":"9f28d62bf728c2bd89411688426a65d7ee55400c","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/post-nav.ejs","hash":"3b6d4568cc46f60c697ad9ec85a4aa5971f3eecc","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/sidebar-footer_image.ejs","hash":"b9157d2072028a1db3c3419f76bde6637e85cf0e","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/sidebar-header.ejs","hash":"06295e01092f55504d30a343c3fdc5091280e495","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/sidebar-navigation.ejs","hash":"ff44901fdfdd952174b0d22e86df7163d7fba9ba","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/structured-data.ejs","hash":"e845df290185dc300cc4edcc08b50fddc5b6909b","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_partial/toc_button.ejs","hash":"688c3fc12e2548ff27fe60688f79dcce2881fd50","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/dnsprefetch.ejs","hash":"5e4c5359d69a64042183db13f6dd771b1f7f6b31","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/leancloud-like.ejs","hash":"e4780fe3bbb049db38d694fc18dee13d799bd51d","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/leancloud-views.ejs","hash":"211dc183b8e84f71b2c25b3ac6659d162d81662b","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/nprogress.ejs","hash":"901a64600854b312209287c702278183600e06b9","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/mathjax.ejs","hash":"b68befe1fea84739c8429c344e570a8bc0357401","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/page-gallery.ejs","hash":"81b9410deef7a83ef5bc7cd18ad042df70d70b94","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/page-links.ejs","hash":"0ebe18e4326f921d6010df8479a08c2d403ba717","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/page-tagcloud.ejs","hash":"e71de74e4067cc4e6aef1e09ac429c92bcd178b3","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/page-timeline.ejs","hash":"9fa0195e08d9fd40aa0333e9279c98bc65acf604","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/qrcode.ejs","hash":"3212e5d29fe8490c5d9a844ec9c2ce9925532de8","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/search-swiftype-js.ejs","hash":"7ad1e843e620ccd9b3c041dccfdcee97921247a1","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/search-local-js.ejs","hash":"f42cc040adf47fc7d74f64b0be3c3230e8a3339e","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/scripts/lib/css_lsload.js","hash":"179f5f5e3297a7fb7d90545ddd94eb468a11046e","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/scripts/lib/get_file_hex.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/scripts/lib/js_hex.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/scripts/lib/js_lsload.js","hash":"72f885b13fe0028a0e2acb7168dcc66e39ea1592","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/scripts/lib/path_for.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/disqus-proxy.css","hash":"770776d8cec27cd5661bdfd59eff9af263439989","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/material-icons.css","hash":"f6f95fe5190f3c65931847246621fb83754eb00c","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/style.css","hash":"a2f27c40f412dc24e1ed5f62a4117523a226eed0","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/style.min.css","hash":"a9e9b33e1fcf818f08a04b909c86f2460a05f060","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/js/js.js","hash":"64b3f20e7138674ecf21e6e3982565ea63feae26","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/js/js.min.js","hash":"709d347d3be033b841de0493b7cf532b594bb1f6","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/analytics/baidu-analytics.ejs","hash":"3866a7fead3c1f94a517f1f9d629f092670b1520","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/analytics/google-analytics.ejs","hash":"3b10ebf524baf0c24b22dcd110b39d15c5acb9b5","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/analytics/cnzz-analytics.ejs","hash":"1765e3dcd92961292f40d1812e593186c77b17ef","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/livere/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/valine/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/changyan/common.ejs","hash":"40e1fc76d6b7f64e226693fb2fe1a6bb17bae245","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/changyan/enter.ejs","hash":"e3cfb4f37ea35457f112f3e822e130c930086497","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/disqus_click/common.ejs","hash":"d243f576b366a62191066459efcc6fd0ab79d00a","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/changyan/main.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/disqus_click/enter.ejs","hash":"d82f0296f8bae25223ec44e6e05b817d3a234884","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/disqus_click/main.ejs","hash":"f53de208ca46c669a868a1922488e39509c6fe3b","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/disqus/common.ejs","hash":"c11cfceb0906a96399dede5da01ff7fe4787f8a5","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/disqus/enter.ejs","hash":"39192034766349e47967da63184f9104fdded2ab","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/disqus/main.ejs","hash":"21e0eeff664191b818d7a0071ae7edcdfc270442","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/gitalk/common.ejs","hash":"f739897518011e1b3de7807c8c5d734984711282","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/gitalk/enter.ejs","hash":"4d70d76465469a57def29a221962a5520fb34ebe","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/gitalk/main.ejs","hash":"1ee7a7b2b9b5ae8c4fa8c4b09c7973b9e085bdf2","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/gitment/common.ejs","hash":"9c6c8d1b448c32afb01c2d0351e87f4d4a17ec3c","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/gitment/enter.ejs","hash":"46d904fde9233694b95c6a3d91b9a2b7a6805850","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/gitment/main.ejs","hash":"e622660eda38cda05847aadc2a3e31a228fc519b","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/livere/enter.ejs","hash":"194b7bb581a3b8608a7ab135b6953d7908f51cc8","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/livere/main.ejs","hash":"1c4be9ba104a8cbcc11d45f11bf8cfe7704b93a5","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/valine/enter.ejs","hash":"ab528aad46237d9e7f1c5b4b2b310dd628b2de63","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/layout/_widget/comment/valine/main.ejs","hash":"3d5d8559e6ad4ffb58a61d96439b2718eb9999b6","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1512153024000},{"_id":"themes/hexo-theme-material-1.5.2/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1512153024000},{"_id":"public/resume/index.html","hash":"26bb64ac21e9daa4ff0d6e8152ea00486813063a","modified":1521448865791},{"_id":"public/2018/02/25/fileUri/index.html","hash":"28bc0cc6d3d766e31d7566707ef038e9392be3e6","modified":1521448865791},{"_id":"public/2018/02/22/html2original/index.html","hash":"c26ea84e8ce53173dc65b4e082e20993de07c70d","modified":1521448865791},{"_id":"public/2017/10/11/about-compat/index.html","hash":"a6f295021d7b7913716d952457bf7486bde9a37c","modified":1521448865792},{"_id":"public/2017/09/12/about-oreo-1/index.html","hash":"dbb09c8024e0610f178cd79c6eff503a9ef8c112","modified":1521448865792},{"_id":"public/2017/07/01/about-intent/index.html","hash":"dcbf92fa8eade5a6b75906981c13e598ebe7a44a","modified":1521448865792},{"_id":"public/2016/12/31/about-my-career-2016/index.html","hash":"3a2f6456e44d07e77758661f93f28b66ca592411","modified":1521448865792},{"_id":"public/2016/12/15/about-material-design-2/index.html","hash":"46debd232319f216d2d4377a283a0b7f96eb19a8","modified":1521448865792},{"_id":"public/2016/11/07/about-material-design-1/index.html","hash":"97676b2a0cdb2c93c165b96de330f639adbf19e8","modified":1521448865792},{"_id":"public/2016/11/06/additional-cursor/index.html","hash":"fd1393bc4388dc7b688210c42a3fe014b9bf1986","modified":1521448865792},{"_id":"public/archives/index.html","hash":"9b586997627f5af784c38e771af808c8deafe71d","modified":1521448865792},{"_id":"public/archives/2016/index.html","hash":"340da987fca4e4a274736fc81f74223cefdf506b","modified":1521448865792},{"_id":"public/archives/2016/11/index.html","hash":"681ac19afe1f804f354584bba3a79e4052c32070","modified":1521448865792},{"_id":"public/archives/2016/12/index.html","hash":"0e802fa308536e3fa5f4e84f116ebe8b8bb3b6ff","modified":1521448865792},{"_id":"public/archives/2017/index.html","hash":"529b58c1167f139929ff428da5098b3a5edb7432","modified":1521448865793},{"_id":"public/archives/2017/07/index.html","hash":"f480075a972574c0d3b412b346e4d9b60dbe71ee","modified":1521448865793},{"_id":"public/archives/2017/09/index.html","hash":"49fd3fcaa420371f39267b829a617c739e01729f","modified":1521448865793},{"_id":"public/archives/2017/10/index.html","hash":"9baedf1df907eada0ecd6c0d818968c8822ece19","modified":1521448865793},{"_id":"public/archives/2018/index.html","hash":"e799eb9e83fb4a07db6cd826017297b792b59185","modified":1521448865793},{"_id":"public/archives/2018/02/index.html","hash":"81418093734561ce2fcd4907a6c8822642c40990","modified":1521448865793},{"_id":"public/index.html","hash":"4b3252a83d62a1668cc359ae0a57afa8bfe6a1b3","modified":1521448865793},{"_id":"public/tags/Android/index.html","hash":"cc574d7638f4f9052f4d91a9f62ce2b7609c88d7","modified":1521448865793},{"_id":"public/tags/Career/index.html","hash":"15577419e7c23ca48744bbf5cb2d9703a3a6c341","modified":1521448865794},{"_id":"public/tags/java/index.html","hash":"1f2df4f2e291c4b590ab7bf03907b84b731a9e5e","modified":1521448865794},{"_id":"public/CNAME","hash":"f57bca50f7786a3de5cbf9d162db903650d0ad75","modified":1521448865804},{"_id":"public/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1521448865804},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1521448865804},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1521448865804},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1521448865804},{"_id":"public/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1521448865804},{"_id":"public/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1521448865804},{"_id":"public/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1521448865804},{"_id":"public/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1521448865804},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1521448865804},{"_id":"public/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1521448865804},{"_id":"public/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1521448865805},{"_id":"public/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1521448865805},{"_id":"public/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1521448865805},{"_id":"public/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1521448865805},{"_id":"public/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1521448865805},{"_id":"public/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1521448865805},{"_id":"public/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1521448865805},{"_id":"public/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1521448865805},{"_id":"public/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1521448865805},{"_id":"public/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1521448865805},{"_id":"public/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1521448865805},{"_id":"public/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1521448865805},{"_id":"public/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1521448865805},{"_id":"public/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1521448865805},{"_id":"public/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1521448865805},{"_id":"public/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1521448865805},{"_id":"public/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1521448865806},{"_id":"public/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1521448865806},{"_id":"public/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1521448865806},{"_id":"public/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1521448865806},{"_id":"public/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1521448865806},{"_id":"public/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1521448865806},{"_id":"public/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1521448865806},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1521448865812},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1521448865815},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1521448865819},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1521448865819},{"_id":"public/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1521448865819},{"_id":"public/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1521448865819},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1521448865819},{"_id":"public/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1521448865819},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1521448865819},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1521448865820},{"_id":"public/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1521448865820},{"_id":"public/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1521448865820},{"_id":"public/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1521448865820},{"_id":"public/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1521448865820},{"_id":"public/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1521448865828},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1521448865828},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1521448865828},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1521448865828},{"_id":"public/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1521448865828},{"_id":"public/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1521448865828},{"_id":"public/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1521448865828},{"_id":"public/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1521448865828},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1521448865829},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1521448865829},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1521448865829},{"_id":"public/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1521448865829},{"_id":"public/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1521448865829},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1521448865829},{"_id":"public/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1521448865829},{"_id":"public/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1521448865829},{"_id":"public/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1521448865829},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1521448865829},{"_id":"public/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1521448865829},{"_id":"public/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1521448865829},{"_id":"public/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1521448865829},{"_id":"public/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1521448865829},{"_id":"public/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1521448865829},{"_id":"public/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1521448865829},{"_id":"public/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1521448865829},{"_id":"public/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1521448865829},{"_id":"public/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1521448865829},{"_id":"public/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1521448865829},{"_id":"public/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1521448865829},{"_id":"public/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1521448865830},{"_id":"public/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1521448865830},{"_id":"public/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1521448865830},{"_id":"public/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1521448865830},{"_id":"public/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1521448865830},{"_id":"public/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1521448865830},{"_id":"public/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1521448865830},{"_id":"public/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1521448865830},{"_id":"public/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1521448865830},{"_id":"public/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1521448865830},{"_id":"public/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1521448865830},{"_id":"public/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1521448865830},{"_id":"public/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1521448865830},{"_id":"public/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1521448865830},{"_id":"public/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1521448865830},{"_id":"public/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1521448865830},{"_id":"public/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1521448865830},{"_id":"public/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1521448865830},{"_id":"public/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1521448865830},{"_id":"public/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1521448865830},{"_id":"public/css/disqus-proxy.css","hash":"d5086cda8aaae20b8d3f9dd50f0be5ccb717e42a","modified":1521448865831},{"_id":"public/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1521448865831},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1521448865831},{"_id":"public/css/material-icons.css","hash":"f6f95fe5190f3c65931847246621fb83754eb00c","modified":1521448865831},{"_id":"public/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1521448865831},{"_id":"public/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1521448865831},{"_id":"public/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1521448865831},{"_id":"public/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1521448865831},{"_id":"public/css/style.css","hash":"a2f27c40f412dc24e1ed5f62a4117523a226eed0","modified":1521448865831},{"_id":"public/css/style.min.css","hash":"a9e9b33e1fcf818f08a04b909c86f2460a05f060","modified":1521448865831},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1521448865831},{"_id":"public/js/js.js","hash":"64b3f20e7138674ecf21e6e3982565ea63feae26","modified":1521448865831},{"_id":"public/js/js.min.js","hash":"709d347d3be033b841de0493b7cf532b594bb1f6","modified":1521448865832},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1521448865832},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1521448865832},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1521448865832},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1521448865832},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1521448865832},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1521448865847},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1521448865851},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1521448865851},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1521448865851},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1521448865852},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1521448865852},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1521448865853}],"Category":[],"Data":[],"Page":[{"title":"个人简历","date":"2018-02-23T13:35:47.000Z","_content":"#\t朱逸林\n#####\t世界上所有的坚持，都是因为热爱。\n*\t男 1993年\n*\tyeying10@hotmail.com\n*\t17601228557\n* \tzyl10.cn\n*\t南京理工大学泰州科技学院 | 2016届软件工程\n\n##\t求职意向\n*\t**目标职能：**\tAndroid 开发工程师\n*\t**到岗时间：**\t一个月内\n*\t**期望薪资：**\t8k——10k\n*\t**目标地点：**\t苏州\n\n##\t自我评价\n喜欢折腾，喜欢刷机，喜欢研究一切与科技有关的东西。可能达不到“极客”标准但至少肯定是个爱好者，对很多东西有着自己的坚持和洁癖。Google 公司忠实的粉丝，崇尚 Android 原生态，同时还是个不折不扣的 Mi Boy。欣赏罗永浩老师但不绝对肯定。大学时由于兴趣所向选择了自学 Android 开发并在毕业后发展为职业。由于用过太多奇奇怪怪但又不得不用的应用，所以极度重视用户体验，并且心怀一定的工匠精神，执着于对产品和细节的不断打磨，渴望写出让自己觉得满意的应用。四年摄影经验培养了很好的耐心和对美的追求，喜欢一切简洁而优雅的东西，深爱 Material Design 设计语言。工作之余热爱动漫和吃鸡，但绝对不是一个宅男。虽然被各种评价为长相严肃但性格极其外向，非常合群。\n\n##\t工作经历\n####\t莲林（上海）信息科技股份有限公司 (2016.3 —— 2018.3)\n\n**来了网 ll100.com**  \n一款面向中小学生的英语作业平台,内容涉及学生端英语听说读写练习及教师端作业布置及批改打分等功能。进入公司的前几个月以学习和积累经验为主，在技术逐渐熟练后独立承担开发和维护工作。\n\n除了完成日常的功能外，还主要开发了几次项目的较大改变：  \n* UI 全面改版为 Material Design，积累了基于新特性开发的经验  \n* 项目由 Java 全面转为 Kotlin 进行开发，更高的开发效率和更优雅可读的代码  \n* 将项目核心的作业功能由 JSBrdigeView 改为原生实现图文混排和交互\n\n##\t自主项目\n**饭团**  \n因个人需求而自主开发的一款追番软件，采用 Material Design 设计语言，使用 Kotlin 进行编写，由于 Github 对私有项目收费所以在 Coding 托管，在酷安市场上架。  \n项目使用了 DataBinding，RxJava，EventBus，Gson等技术和开源框架，使用缓存加快页面加载速度，提升用户体验。\n\n**个人 Blog**  \n地址为 zyl10.cn  \n项目在 GitHub 托管，使用 Github Page 与 Hexo 配合搭建，用于自己记录开发心得。\n\n##\t技能清单\n* 熟练使用 Android Studio 进行开发\n* 熟悉 Android 基础类库、核心类，及SDK使用方法\n* 熟悉多线程、网络通信、读写文件等实现方式\n* 熟悉主流开源类库或第三方框架，如RxJava、OkHttp、Gson等\n* 熟练使用 Mac 进行开发\n* 熟练使用 git 和 Github\n* 熟练掌握 Java 语言和 Kotlin 语言\n\n##\t致谢\n####\t感谢您花时间阅读我的简历，期待能有机会和您共事。\n","source":"resume/index.md","raw":"---\ntitle: 个人简历\ndate: 2018-02-23 21:35:47\n---\n#\t朱逸林\n#####\t世界上所有的坚持，都是因为热爱。\n*\t男 1993年\n*\tyeying10@hotmail.com\n*\t17601228557\n* \tzyl10.cn\n*\t南京理工大学泰州科技学院 | 2016届软件工程\n\n##\t求职意向\n*\t**目标职能：**\tAndroid 开发工程师\n*\t**到岗时间：**\t一个月内\n*\t**期望薪资：**\t8k——10k\n*\t**目标地点：**\t苏州\n\n##\t自我评价\n喜欢折腾，喜欢刷机，喜欢研究一切与科技有关的东西。可能达不到“极客”标准但至少肯定是个爱好者，对很多东西有着自己的坚持和洁癖。Google 公司忠实的粉丝，崇尚 Android 原生态，同时还是个不折不扣的 Mi Boy。欣赏罗永浩老师但不绝对肯定。大学时由于兴趣所向选择了自学 Android 开发并在毕业后发展为职业。由于用过太多奇奇怪怪但又不得不用的应用，所以极度重视用户体验，并且心怀一定的工匠精神，执着于对产品和细节的不断打磨，渴望写出让自己觉得满意的应用。四年摄影经验培养了很好的耐心和对美的追求，喜欢一切简洁而优雅的东西，深爱 Material Design 设计语言。工作之余热爱动漫和吃鸡，但绝对不是一个宅男。虽然被各种评价为长相严肃但性格极其外向，非常合群。\n\n##\t工作经历\n####\t莲林（上海）信息科技股份有限公司 (2016.3 —— 2018.3)\n\n**来了网 ll100.com**  \n一款面向中小学生的英语作业平台,内容涉及学生端英语听说读写练习及教师端作业布置及批改打分等功能。进入公司的前几个月以学习和积累经验为主，在技术逐渐熟练后独立承担开发和维护工作。\n\n除了完成日常的功能外，还主要开发了几次项目的较大改变：  \n* UI 全面改版为 Material Design，积累了基于新特性开发的经验  \n* 项目由 Java 全面转为 Kotlin 进行开发，更高的开发效率和更优雅可读的代码  \n* 将项目核心的作业功能由 JSBrdigeView 改为原生实现图文混排和交互\n\n##\t自主项目\n**饭团**  \n因个人需求而自主开发的一款追番软件，采用 Material Design 设计语言，使用 Kotlin 进行编写，由于 Github 对私有项目收费所以在 Coding 托管，在酷安市场上架。  \n项目使用了 DataBinding，RxJava，EventBus，Gson等技术和开源框架，使用缓存加快页面加载速度，提升用户体验。\n\n**个人 Blog**  \n地址为 zyl10.cn  \n项目在 GitHub 托管，使用 Github Page 与 Hexo 配合搭建，用于自己记录开发心得。\n\n##\t技能清单\n* 熟练使用 Android Studio 进行开发\n* 熟悉 Android 基础类库、核心类，及SDK使用方法\n* 熟悉多线程、网络通信、读写文件等实现方式\n* 熟悉主流开源类库或第三方框架，如RxJava、OkHttp、Gson等\n* 熟练使用 Mac 进行开发\n* 熟练使用 git 和 Github\n* 熟练掌握 Java 语言和 Kotlin 语言\n\n##\t致谢\n####\t感谢您花时间阅读我的简历，期待能有机会和您共事。\n","updated":"2018-03-19T08:18:01.197Z","path":"resume/index.html","comments":1,"layout":"page","_id":"cjexzddqj0001056w3xv40wx7","content":"<h1 id=\"朱逸林\"><a href=\"#朱逸林\" class=\"headerlink\" title=\"朱逸林\"></a>朱逸林</h1><h5 id=\"世界上所有的坚持，都是因为热爱。\"><a href=\"#世界上所有的坚持，都是因为热爱。\" class=\"headerlink\" title=\"世界上所有的坚持，都是因为热爱。\"></a>世界上所有的坚持，都是因为热爱。</h5><ul>\n<li>男 1993年</li>\n<li>yeying10@hotmail.com</li>\n<li>17601228557</li>\n<li>zyl10.cn</li>\n<li>南京理工大学泰州科技学院 | 2016届软件工程</li>\n</ul>\n<h2 id=\"求职意向\"><a href=\"#求职意向\" class=\"headerlink\" title=\"求职意向\"></a>求职意向</h2><ul>\n<li><strong>目标职能：</strong>    Android 开发工程师</li>\n<li><strong>到岗时间：</strong>    一个月内</li>\n<li><strong>期望薪资：</strong>    8k——10k</li>\n<li><strong>目标地点：</strong>    苏州</li>\n</ul>\n<h2 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h2><p>喜欢折腾，喜欢刷机，喜欢研究一切与科技有关的东西。可能达不到“极客”标准但至少肯定是个爱好者，对很多东西有着自己的坚持和洁癖。Google 公司忠实的粉丝，崇尚 Android 原生态，同时还是个不折不扣的 Mi Boy。欣赏罗永浩老师但不绝对肯定。大学时由于兴趣所向选择了自学 Android 开发并在毕业后发展为职业。由于用过太多奇奇怪怪但又不得不用的应用，所以极度重视用户体验，并且心怀一定的工匠精神，执着于对产品和细节的不断打磨，渴望写出让自己觉得满意的应用。四年摄影经验培养了很好的耐心和对美的追求，喜欢一切简洁而优雅的东西，深爱 Material Design 设计语言。工作之余热爱动漫和吃鸡，但绝对不是一个宅男。虽然被各种评价为长相严肃但性格极其外向，非常合群。</p>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h4 id=\"莲林（上海）信息科技股份有限公司-2016-3-——-2018-3\"><a href=\"#莲林（上海）信息科技股份有限公司-2016-3-——-2018-3\" class=\"headerlink\" title=\"莲林（上海）信息科技股份有限公司 (2016.3 —— 2018.3)\"></a>莲林（上海）信息科技股份有限公司 (2016.3 —— 2018.3)</h4><p><strong>来了网 ll100.com</strong><br>一款面向中小学生的英语作业平台,内容涉及学生端英语听说读写练习及教师端作业布置及批改打分等功能。进入公司的前几个月以学习和积累经验为主，在技术逐渐熟练后独立承担开发和维护工作。</p>\n<p>除了完成日常的功能外，还主要开发了几次项目的较大改变：  </p>\n<ul>\n<li>UI 全面改版为 Material Design，积累了基于新特性开发的经验  </li>\n<li>项目由 Java 全面转为 Kotlin 进行开发，更高的开发效率和更优雅可读的代码  </li>\n<li>将项目核心的作业功能由 JSBrdigeView 改为原生实现图文混排和交互</li>\n</ul>\n<h2 id=\"自主项目\"><a href=\"#自主项目\" class=\"headerlink\" title=\"自主项目\"></a>自主项目</h2><p><strong>饭团</strong><br>因个人需求而自主开发的一款追番软件，采用 Material Design 设计语言，使用 Kotlin 进行编写，由于 Github 对私有项目收费所以在 Coding 托管，在酷安市场上架。<br>项目使用了 DataBinding，RxJava，EventBus，Gson等技术和开源框架，使用缓存加快页面加载速度，提升用户体验。</p>\n<p><strong>个人 Blog</strong><br>地址为 zyl10.cn<br>项目在 GitHub 托管，使用 Github Page 与 Hexo 配合搭建，用于自己记录开发心得。</p>\n<h2 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h2><ul>\n<li>熟练使用 Android Studio 进行开发</li>\n<li>熟悉 Android 基础类库、核心类，及SDK使用方法</li>\n<li>熟悉多线程、网络通信、读写文件等实现方式</li>\n<li>熟悉主流开源类库或第三方框架，如RxJava、OkHttp、Gson等</li>\n<li>熟练使用 Mac 进行开发</li>\n<li>熟练使用 git 和 Github</li>\n<li>熟练掌握 Java 语言和 Kotlin 语言</li>\n</ul>\n<h2 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h2><h4 id=\"感谢您花时间阅读我的简历，期待能有机会和您共事。\"><a href=\"#感谢您花时间阅读我的简历，期待能有机会和您共事。\" class=\"headerlink\" title=\"感谢您花时间阅读我的简历，期待能有机会和您共事。\"></a>感谢您花时间阅读我的简历，期待能有机会和您共事。</h4>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"朱逸林\"><a href=\"#朱逸林\" class=\"headerlink\" title=\"朱逸林\"></a>朱逸林</h1><h5 id=\"世界上所有的坚持，都是因为热爱。\"><a href=\"#世界上所有的坚持，都是因为热爱。\" class=\"headerlink\" title=\"世界上所有的坚持，都是因为热爱。\"></a>世界上所有的坚持，都是因为热爱。</h5><ul>\n<li>男 1993年</li>\n<li>yeying10@hotmail.com</li>\n<li>17601228557</li>\n<li>zyl10.cn</li>\n<li>南京理工大学泰州科技学院 | 2016届软件工程</li>\n</ul>\n<h2 id=\"求职意向\"><a href=\"#求职意向\" class=\"headerlink\" title=\"求职意向\"></a>求职意向</h2><ul>\n<li><strong>目标职能：</strong>    Android 开发工程师</li>\n<li><strong>到岗时间：</strong>    一个月内</li>\n<li><strong>期望薪资：</strong>    8k——10k</li>\n<li><strong>目标地点：</strong>    苏州</li>\n</ul>\n<h2 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h2><p>喜欢折腾，喜欢刷机，喜欢研究一切与科技有关的东西。可能达不到“极客”标准但至少肯定是个爱好者，对很多东西有着自己的坚持和洁癖。Google 公司忠实的粉丝，崇尚 Android 原生态，同时还是个不折不扣的 Mi Boy。欣赏罗永浩老师但不绝对肯定。大学时由于兴趣所向选择了自学 Android 开发并在毕业后发展为职业。由于用过太多奇奇怪怪但又不得不用的应用，所以极度重视用户体验，并且心怀一定的工匠精神，执着于对产品和细节的不断打磨，渴望写出让自己觉得满意的应用。四年摄影经验培养了很好的耐心和对美的追求，喜欢一切简洁而优雅的东西，深爱 Material Design 设计语言。工作之余热爱动漫和吃鸡，但绝对不是一个宅男。虽然被各种评价为长相严肃但性格极其外向，非常合群。</p>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h4 id=\"莲林（上海）信息科技股份有限公司-2016-3-——-2018-3\"><a href=\"#莲林（上海）信息科技股份有限公司-2016-3-——-2018-3\" class=\"headerlink\" title=\"莲林（上海）信息科技股份有限公司 (2016.3 —— 2018.3)\"></a>莲林（上海）信息科技股份有限公司 (2016.3 —— 2018.3)</h4><p><strong>来了网 ll100.com</strong><br>一款面向中小学生的英语作业平台,内容涉及学生端英语听说读写练习及教师端作业布置及批改打分等功能。进入公司的前几个月以学习和积累经验为主，在技术逐渐熟练后独立承担开发和维护工作。</p>\n<p>除了完成日常的功能外，还主要开发了几次项目的较大改变：  </p>\n<ul>\n<li>UI 全面改版为 Material Design，积累了基于新特性开发的经验  </li>\n<li>项目由 Java 全面转为 Kotlin 进行开发，更高的开发效率和更优雅可读的代码  </li>\n<li>将项目核心的作业功能由 JSBrdigeView 改为原生实现图文混排和交互</li>\n</ul>\n<h2 id=\"自主项目\"><a href=\"#自主项目\" class=\"headerlink\" title=\"自主项目\"></a>自主项目</h2><p><strong>饭团</strong><br>因个人需求而自主开发的一款追番软件，采用 Material Design 设计语言，使用 Kotlin 进行编写，由于 Github 对私有项目收费所以在 Coding 托管，在酷安市场上架。<br>项目使用了 DataBinding，RxJava，EventBus，Gson等技术和开源框架，使用缓存加快页面加载速度，提升用户体验。</p>\n<p><strong>个人 Blog</strong><br>地址为 zyl10.cn<br>项目在 GitHub 托管，使用 Github Page 与 Hexo 配合搭建，用于自己记录开发心得。</p>\n<h2 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h2><ul>\n<li>熟练使用 Android Studio 进行开发</li>\n<li>熟悉 Android 基础类库、核心类，及SDK使用方法</li>\n<li>熟悉多线程、网络通信、读写文件等实现方式</li>\n<li>熟悉主流开源类库或第三方框架，如RxJava、OkHttp、Gson等</li>\n<li>熟练使用 Mac 进行开发</li>\n<li>熟练使用 git 和 Github</li>\n<li>熟练掌握 Java 语言和 Kotlin 语言</li>\n</ul>\n<h2 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h2><h4 id=\"感谢您花时间阅读我的简历，期待能有机会和您共事。\"><a href=\"#感谢您花时间阅读我的简历，期待能有机会和您共事。\" class=\"headerlink\" title=\"感谢您花时间阅读我的简历，期待能有机会和您共事。\"></a>感谢您花时间阅读我的简历，期待能有机会和您共事。</h4>"}],"Post":[{"title":"解决太坑的 svg 资源向下兼容性问题记录","date":"2017-10-11T15:06:04.000Z","_content":"终于合并了上次做的 Adaptive Icon 的分支，但发现服务器跑不过去，一看是由于没有升级 gradle 等对应配置文件的问题。\n当升级过后，发现了一个很大的问题。我们早早使用了 SVG 作为图片资源文件，取代了体积较大的 .png 文件。一直以来的做法是\n```XML\n<ImageView\n android:layout_width=\"wrap_content\"\n android:layout_height=\"wrap_content\"          \n android:src=\"@drawable/xxxxxxxx\" />\n```\n但现在发现我们的用法是错误的。经过踩坑简单记录一下正确的方法，可以解决向下兼容性问题。\n首先，需要在 build.gradle 配置文件中添加\n```\ndefaultConfig {\n        vectorDrawables.useSupportLibrary = true\n      }\n```\n然后引入\n```\ncompile 'com.android.support:appcompat-v7:26.1.0'\n```\n第三步就是将 ImageView 属性设置为如下：\n```XML\n<ImageView\n android:layout_width=\"wrap_content\"\n android:layout_height=\"wrap_content\"          \n app:srcCompat=\"@drawable/xxxxxxxx\" />\n```\n到此为低版本加载 SVG 的方法。当然 Android 5.0 以上不存在这个问题。\n另外提一句，这一切是在 Activity 父类为 AppCompatActivity 的情况下进行，如果 Activity 继承自 Activity，那么应该使用 android.support.v7.widget.AppCompatImageView, 因为当使用 AppCompatActivity 时会自动将 ImageView 包装为 AppCompatImageView。\n另一个问题就是 Textview 显示 SVG 图片的问题，这是使用比较多的地方，我们在使用 android:drawableRight 属性的时候会倒入 SVG 图像，但是这样做的结果就是低版本的奔溃。事实上，AppCompatTextView 是没有对 CompoundDrawable 进行适配的，所以我们的解决方法是代码手工写，判断系统版本如果小于5.0，就用 ContextCompat.getDrawable 获取到 Drawable 实例，再 setCompoundDrawablesWithIntrinsicBounds。建议自己定义一个 TextView，免去手写烦恼，为了节省时间，我用了一个开源库， [VectorCompatTextView](https://github.com/woxingxiao/VectorCompatTextView)，谢谢作者分享这个库。\n当然我说的 ContextCompat.getDrawable 获取到 Drawable 实例然后赋值的方法是最好用的方法，当个别 XML 解决不了的时候, 如 ImageView 想设置 background 但没有那么一个叫做 backgroundCompat 属性的时候建议这样写。\n```\nimageView.background = ContextCompat.getDrawable(context, R.drawable.xxxxxxxx)\n```\n当然今天只是简单记录一下，这几天有一些东西需要记录，包括多渠道打包配置文件，还有 Linux 安装体验，包括重装系统后恢复 blog 的记录。\n","source":"_posts/about-compat.md","raw":"---\ntitle: 解决太坑的 svg 资源向下兼容性问题记录\ndate: 2017-10-11 23:06:04\ntags: Android\n---\n终于合并了上次做的 Adaptive Icon 的分支，但发现服务器跑不过去，一看是由于没有升级 gradle 等对应配置文件的问题。\n当升级过后，发现了一个很大的问题。我们早早使用了 SVG 作为图片资源文件，取代了体积较大的 .png 文件。一直以来的做法是\n```XML\n<ImageView\n android:layout_width=\"wrap_content\"\n android:layout_height=\"wrap_content\"          \n android:src=\"@drawable/xxxxxxxx\" />\n```\n但现在发现我们的用法是错误的。经过踩坑简单记录一下正确的方法，可以解决向下兼容性问题。\n首先，需要在 build.gradle 配置文件中添加\n```\ndefaultConfig {\n        vectorDrawables.useSupportLibrary = true\n      }\n```\n然后引入\n```\ncompile 'com.android.support:appcompat-v7:26.1.0'\n```\n第三步就是将 ImageView 属性设置为如下：\n```XML\n<ImageView\n android:layout_width=\"wrap_content\"\n android:layout_height=\"wrap_content\"          \n app:srcCompat=\"@drawable/xxxxxxxx\" />\n```\n到此为低版本加载 SVG 的方法。当然 Android 5.0 以上不存在这个问题。\n另外提一句，这一切是在 Activity 父类为 AppCompatActivity 的情况下进行，如果 Activity 继承自 Activity，那么应该使用 android.support.v7.widget.AppCompatImageView, 因为当使用 AppCompatActivity 时会自动将 ImageView 包装为 AppCompatImageView。\n另一个问题就是 Textview 显示 SVG 图片的问题，这是使用比较多的地方，我们在使用 android:drawableRight 属性的时候会倒入 SVG 图像，但是这样做的结果就是低版本的奔溃。事实上，AppCompatTextView 是没有对 CompoundDrawable 进行适配的，所以我们的解决方法是代码手工写，判断系统版本如果小于5.0，就用 ContextCompat.getDrawable 获取到 Drawable 实例，再 setCompoundDrawablesWithIntrinsicBounds。建议自己定义一个 TextView，免去手写烦恼，为了节省时间，我用了一个开源库， [VectorCompatTextView](https://github.com/woxingxiao/VectorCompatTextView)，谢谢作者分享这个库。\n当然我说的 ContextCompat.getDrawable 获取到 Drawable 实例然后赋值的方法是最好用的方法，当个别 XML 解决不了的时候, 如 ImageView 想设置 background 但没有那么一个叫做 backgroundCompat 属性的时候建议这样写。\n```\nimageView.background = ContextCompat.getDrawable(context, R.drawable.xxxxxxxx)\n```\n当然今天只是简单记录一下，这几天有一些东西需要记录，包括多渠道打包配置文件，还有 Linux 安装体验，包括重装系统后恢复 blog 的记录。\n","slug":"about-compat","published":1,"updated":"2018-03-19T08:18:01.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjexzddqg0000056wiluz0rbs","content":"<p>终于合并了上次做的 Adaptive Icon 的分支，但发现服务器跑不过去，一看是由于没有升级 gradle 等对应配置文件的问题。<br>当升级过后，发现了一个很大的问题。我们早早使用了 SVG 作为图片资源文件，取代了体积较大的 .png 文件。一直以来的做法是<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\"> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"> <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>          </div><div class=\"line\"> <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/xxxxxxxx\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>但现在发现我们的用法是错误的。经过踩坑简单记录一下正确的方法，可以解决向下兼容性问题。<br>首先，需要在 build.gradle 配置文件中添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaultConfig &#123;</div><div class=\"line\">        vectorDrawables.useSupportLibrary = true</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure></p>\n<p>然后引入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;com.android.support:appcompat-v7:26.1.0&apos;</div></pre></td></tr></table></figure></p>\n<p>第三步就是将 ImageView 属性设置为如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\"> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"> <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>          </div><div class=\"line\"> <span class=\"attr\">app:srcCompat</span>=<span class=\"string\">\"@drawable/xxxxxxxx\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>到此为低版本加载 SVG 的方法。当然 Android 5.0 以上不存在这个问题。<br>另外提一句，这一切是在 Activity 父类为 AppCompatActivity 的情况下进行，如果 Activity 继承自 Activity，那么应该使用 android.support.v7.widget.AppCompatImageView, 因为当使用 AppCompatActivity 时会自动将 ImageView 包装为 AppCompatImageView。<br>另一个问题就是 Textview 显示 SVG 图片的问题，这是使用比较多的地方，我们在使用 android:drawableRight 属性的时候会倒入 SVG 图像，但是这样做的结果就是低版本的奔溃。事实上，AppCompatTextView 是没有对 CompoundDrawable 进行适配的，所以我们的解决方法是代码手工写，判断系统版本如果小于5.0，就用 ContextCompat.getDrawable 获取到 Drawable 实例，再 setCompoundDrawablesWithIntrinsicBounds。建议自己定义一个 TextView，免去手写烦恼，为了节省时间，我用了一个开源库， <a href=\"https://github.com/woxingxiao/VectorCompatTextView\" target=\"_blank\" rel=\"external\">VectorCompatTextView</a>，谢谢作者分享这个库。<br>当然我说的 ContextCompat.getDrawable 获取到 Drawable 实例然后赋值的方法是最好用的方法，当个别 XML 解决不了的时候, 如 ImageView 想设置 background 但没有那么一个叫做 backgroundCompat 属性的时候建议这样写。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">imageView.background = ContextCompat.getDrawable(context, R.drawable.xxxxxxxx)</div></pre></td></tr></table></figure></p>\n<p>当然今天只是简单记录一下，这几天有一些东西需要记录，包括多渠道打包配置文件，还有 Linux 安装体验，包括重装系统后恢复 blog 的记录。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>终于合并了上次做的 Adaptive Icon 的分支，但发现服务器跑不过去，一看是由于没有升级 gradle 等对应配置文件的问题。<br>当升级过后，发现了一个很大的问题。我们早早使用了 SVG 作为图片资源文件，取代了体积较大的 .png 文件。一直以来的做法是<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\"> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"> <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>          </div><div class=\"line\"> <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/xxxxxxxx\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>但现在发现我们的用法是错误的。经过踩坑简单记录一下正确的方法，可以解决向下兼容性问题。<br>首先，需要在 build.gradle 配置文件中添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaultConfig &#123;</div><div class=\"line\">        vectorDrawables.useSupportLibrary = true</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure></p>\n<p>然后引入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;com.android.support:appcompat-v7:26.1.0&apos;</div></pre></td></tr></table></figure></p>\n<p>第三步就是将 ImageView 属性设置为如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\"> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"> <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>          </div><div class=\"line\"> <span class=\"attr\">app:srcCompat</span>=<span class=\"string\">\"@drawable/xxxxxxxx\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>到此为低版本加载 SVG 的方法。当然 Android 5.0 以上不存在这个问题。<br>另外提一句，这一切是在 Activity 父类为 AppCompatActivity 的情况下进行，如果 Activity 继承自 Activity，那么应该使用 android.support.v7.widget.AppCompatImageView, 因为当使用 AppCompatActivity 时会自动将 ImageView 包装为 AppCompatImageView。<br>另一个问题就是 Textview 显示 SVG 图片的问题，这是使用比较多的地方，我们在使用 android:drawableRight 属性的时候会倒入 SVG 图像，但是这样做的结果就是低版本的奔溃。事实上，AppCompatTextView 是没有对 CompoundDrawable 进行适配的，所以我们的解决方法是代码手工写，判断系统版本如果小于5.0，就用 ContextCompat.getDrawable 获取到 Drawable 实例，再 setCompoundDrawablesWithIntrinsicBounds。建议自己定义一个 TextView，免去手写烦恼，为了节省时间，我用了一个开源库， <a href=\"https://github.com/woxingxiao/VectorCompatTextView\" target=\"_blank\" rel=\"external\">VectorCompatTextView</a>，谢谢作者分享这个库。<br>当然我说的 ContextCompat.getDrawable 获取到 Drawable 实例然后赋值的方法是最好用的方法，当个别 XML 解决不了的时候, 如 ImageView 想设置 background 但没有那么一个叫做 backgroundCompat 属性的时候建议这样写。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">imageView.background = ContextCompat.getDrawable(context, R.drawable.xxxxxxxx)</div></pre></td></tr></table></figure></p>\n<p>当然今天只是简单记录一下，这几天有一些东西需要记录，包括多渠道打包配置文件，还有 Linux 安装体验，包括重装系统后恢复 blog 的记录。</p>\n"},{"title":"有关于 Android 隐式启动 Activity","date":"2017-07-01T06:35:08.000Z","_content":"忽然发现，半年没有更新过 Blog 了。。。。。\n好尴尬，本来这个用来记录自己技术的平台是打算每月至少更新一两次，记录一下这段时间的收获的，可是由于懒散和换了电脑后环境的问题，一直没有继续写。\n今天谈一下 Intent 的隐式启动。\n这是一个很入门级的问题，但由于之前没用过所以也没管过，既然上周做了今天就写一下自己的体验。\nIntent 是平时最常用的组件，我们平时用于页面跳转的就是显示 Intent。\n例如：\n```java\n  val intent = Intent(this, SecondActivity::class.java)\n  intent.putExtra(\".....\", ......)\n  startActivity(intent)\n```\n而隐式启动则是通过 url 的跳转来实现的。\n首先是 url 的结构。\n虽然我们不是做网页的但是我们要明白，一个完整的 url 是由哪几部分构成的。\nurl一般主要由Schema、Host、Path以及QueryParameter等构成。\n```\nSchema 访问协议\n\nHost 域名\n\nport 端口\n\npathName 路径名\n\nQueryParameter 查询参数\n```\n我们使用 intent.data 可以接收到这个uri。\n这里要提一下 uri 和 url 的区别。\n```\n首先，URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。\n而URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。\n而URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:java-net@java.sun.com。\n也就是说，URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。\n\n在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而URL类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的，schema必须被指定。\n```\n我们使用 intent.data 接收到的是一个 Uri 的对象，我们可以通过该对象获取到我们需要的信息。\n我的做法是建立一个 UrlDispatcher，在 application 中初始化，用来接受和处理 url。\n要实现隐式跳转的第一步就是在清单文件中注册 Intent 过滤器。\n```XML\n  <activity\n     android:name=\".ui.common.account.UserNameActivity\"\n     android:launchMode=\"singleTop\">\n     <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.BROWSABLE\"/>\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <data android:scheme=\"zhuyl\" />\n      </intent-filter>\n  </activity>\n```\n这样我们就可以接收到域名协议为 zhuyl 的 url 了。\n再来看看我们的 UrlDispatcher。\n```java\n       var actions: MutableMap<String, (MutableMap<String, String>) -> Unit> = HashMap()\n       val url = uri.host + uri.path\n       val action = if (url.endsWith(\"/\")) url.dropLast(1) else url\n\n       val params: MutableMap<String, String> = HashMap()\n       uri.queryParameterNames.forEach {\n           val parameter = uri.getQueryParameter(it)\n           params[it] = parameter\n       }\n\n       actions[action]?.invoke(params)\n```\n而我们根据 action 来判断调用的方法。\n举个例子。\n```\nzhuyl://open_link/?url=https://baidu.com\n```\n通过我们的代码解析后，可以得到 action 为 \"open_link\"\n那么\n```java\nactions[\"open_link\"] = { params ->\n   val intent = Intent(application, SecondActivity::class.java)\n   val url = params[\"url\"]\n   intent.putExtra(\"url\", url)\n   intentToActivity(intent)\n}\n```\n这样做，我们在调用 url 启动 activity 的时候就可以拥有一种比较优雅的跳转方式了。\n当然，从网页端发出的跳转也就可以处理了。\n","source":"_posts/about-intent.md","raw":"---\ntitle: 有关于 Android 隐式启动 Activity\ndate: 2017-07-01 14:35:08\ntags: Android\n---\n忽然发现，半年没有更新过 Blog 了。。。。。\n好尴尬，本来这个用来记录自己技术的平台是打算每月至少更新一两次，记录一下这段时间的收获的，可是由于懒散和换了电脑后环境的问题，一直没有继续写。\n今天谈一下 Intent 的隐式启动。\n这是一个很入门级的问题，但由于之前没用过所以也没管过，既然上周做了今天就写一下自己的体验。\nIntent 是平时最常用的组件，我们平时用于页面跳转的就是显示 Intent。\n例如：\n```java\n  val intent = Intent(this, SecondActivity::class.java)\n  intent.putExtra(\".....\", ......)\n  startActivity(intent)\n```\n而隐式启动则是通过 url 的跳转来实现的。\n首先是 url 的结构。\n虽然我们不是做网页的但是我们要明白，一个完整的 url 是由哪几部分构成的。\nurl一般主要由Schema、Host、Path以及QueryParameter等构成。\n```\nSchema 访问协议\n\nHost 域名\n\nport 端口\n\npathName 路径名\n\nQueryParameter 查询参数\n```\n我们使用 intent.data 可以接收到这个uri。\n这里要提一下 uri 和 url 的区别。\n```\n首先，URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。\n而URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。\n而URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:java-net@java.sun.com。\n也就是说，URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。\n\n在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而URL类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的，schema必须被指定。\n```\n我们使用 intent.data 接收到的是一个 Uri 的对象，我们可以通过该对象获取到我们需要的信息。\n我的做法是建立一个 UrlDispatcher，在 application 中初始化，用来接受和处理 url。\n要实现隐式跳转的第一步就是在清单文件中注册 Intent 过滤器。\n```XML\n  <activity\n     android:name=\".ui.common.account.UserNameActivity\"\n     android:launchMode=\"singleTop\">\n     <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.BROWSABLE\"/>\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <data android:scheme=\"zhuyl\" />\n      </intent-filter>\n  </activity>\n```\n这样我们就可以接收到域名协议为 zhuyl 的 url 了。\n再来看看我们的 UrlDispatcher。\n```java\n       var actions: MutableMap<String, (MutableMap<String, String>) -> Unit> = HashMap()\n       val url = uri.host + uri.path\n       val action = if (url.endsWith(\"/\")) url.dropLast(1) else url\n\n       val params: MutableMap<String, String> = HashMap()\n       uri.queryParameterNames.forEach {\n           val parameter = uri.getQueryParameter(it)\n           params[it] = parameter\n       }\n\n       actions[action]?.invoke(params)\n```\n而我们根据 action 来判断调用的方法。\n举个例子。\n```\nzhuyl://open_link/?url=https://baidu.com\n```\n通过我们的代码解析后，可以得到 action 为 \"open_link\"\n那么\n```java\nactions[\"open_link\"] = { params ->\n   val intent = Intent(application, SecondActivity::class.java)\n   val url = params[\"url\"]\n   intent.putExtra(\"url\", url)\n   intentToActivity(intent)\n}\n```\n这样做，我们在调用 url 启动 activity 的时候就可以拥有一种比较优雅的跳转方式了。\n当然，从网页端发出的跳转也就可以处理了。\n","slug":"about-intent","published":1,"updated":"2018-03-19T08:18:01.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjexzddqk0002056wkorbuwzf","content":"<p>忽然发现，半年没有更新过 Blog 了。。。。。<br>好尴尬，本来这个用来记录自己技术的平台是打算每月至少更新一两次，记录一下这段时间的收获的，可是由于懒散和换了电脑后环境的问题，一直没有继续写。<br>今天谈一下 Intent 的隐式启动。<br>这是一个很入门级的问题，但由于之前没用过所以也没管过，既然上周做了今天就写一下自己的体验。<br>Intent 是平时最常用的组件，我们平时用于页面跳转的就是显示 Intent。<br>例如：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">val intent = Intent(this, SecondActivity::class.java)</div><div class=\"line\">intent.putExtra(\".....\", ......)</div><div class=\"line\">startActivity(intent)</div></pre></td></tr></table></figure></p>\n<p>而隐式启动则是通过 url 的跳转来实现的。<br>首先是 url 的结构。<br>虽然我们不是做网页的但是我们要明白，一个完整的 url 是由哪几部分构成的。<br>url一般主要由Schema、Host、Path以及QueryParameter等构成。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Schema 访问协议</div><div class=\"line\"></div><div class=\"line\">Host 域名</div><div class=\"line\"></div><div class=\"line\">port 端口</div><div class=\"line\"></div><div class=\"line\">pathName 路径名</div><div class=\"line\"></div><div class=\"line\">QueryParameter 查询参数</div></pre></td></tr></table></figure></p>\n<p>我们使用 intent.data 可以接收到这个uri。<br>这里要提一下 uri 和 url 的区别。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">首先，URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。</div><div class=\"line\">而URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。</div><div class=\"line\">而URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:java-net@java.sun.com。</div><div class=\"line\">也就是说，URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。</div><div class=\"line\"></div><div class=\"line\">在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而URL类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的，schema必须被指定。</div></pre></td></tr></table></figure></p>\n<p>我们使用 intent.data 接收到的是一个 Uri 的对象，我们可以通过该对象获取到我们需要的信息。<br>我的做法是建立一个 UrlDispatcher，在 application 中初始化，用来接受和处理 url。<br>要实现隐式跳转的第一步就是在清单文件中注册 Intent 过滤器。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">   <span class=\"attr\">android:name</span>=<span class=\"string\">\".ui.common.account.UserNameActivity\"</span></div><div class=\"line\">   <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"singleTop\"</span>&gt;</div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.VIEW\"</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.BROWSABLE\"</span>/&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:scheme</span>=<span class=\"string\">\"zhuyl\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这样我们就可以接收到域名协议为 zhuyl 的 url 了。<br>再来看看我们的 UrlDispatcher。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var actions: MutableMap&lt;String, (MutableMap&lt;String, String&gt;) -&gt; Unit&gt; = HashMap()</div><div class=\"line\">val url = uri.host + uri.path</div><div class=\"line\">val action = <span class=\"keyword\">if</span> (url.endsWith(<span class=\"string\">\"/\"</span>)) url.dropLast(<span class=\"number\">1</span>) <span class=\"keyword\">else</span> url</div><div class=\"line\"></div><div class=\"line\">val params: MutableMap&lt;String, String&gt; = HashMap()</div><div class=\"line\">uri.queryParameterNames.forEach &#123;</div><div class=\"line\">    val parameter = uri.getQueryParameter(it)</div><div class=\"line\">    params[it] = parameter</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">actions[action]?.invoke(params)</div></pre></td></tr></table></figure></p>\n<p>而我们根据 action 来判断调用的方法。<br>举个例子。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">zhuyl://open_link/?url=https://baidu.com</div></pre></td></tr></table></figure></p>\n<p>通过我们的代码解析后，可以得到 action 为 “open_link”<br>那么<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">actions[<span class=\"string\">\"open_link\"</span>] = &#123; params -&gt;</div><div class=\"line\">   val intent = Intent(application, SecondActivity::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></div><div class=\"line\">   <span class=\"title\">val</span> <span class=\"title\">url</span> = params[<span class=\"string\">\"url\"</span>]</div><div class=\"line\">   intent.putExtra(<span class=\"string\">\"url\"</span>, url)</div><div class=\"line\">   intentToActivity(intent)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样做，我们在调用 url 启动 activity 的时候就可以拥有一种比较优雅的跳转方式了。<br>当然，从网页端发出的跳转也就可以处理了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>忽然发现，半年没有更新过 Blog 了。。。。。<br>好尴尬，本来这个用来记录自己技术的平台是打算每月至少更新一两次，记录一下这段时间的收获的，可是由于懒散和换了电脑后环境的问题，一直没有继续写。<br>今天谈一下 Intent 的隐式启动。<br>这是一个很入门级的问题，但由于之前没用过所以也没管过，既然上周做了今天就写一下自己的体验。<br>Intent 是平时最常用的组件，我们平时用于页面跳转的就是显示 Intent。<br>例如：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">val intent = Intent(this, SecondActivity::class.java)</div><div class=\"line\">intent.putExtra(\".....\", ......)</div><div class=\"line\">startActivity(intent)</div></pre></td></tr></table></figure></p>\n<p>而隐式启动则是通过 url 的跳转来实现的。<br>首先是 url 的结构。<br>虽然我们不是做网页的但是我们要明白，一个完整的 url 是由哪几部分构成的。<br>url一般主要由Schema、Host、Path以及QueryParameter等构成。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Schema 访问协议</div><div class=\"line\"></div><div class=\"line\">Host 域名</div><div class=\"line\"></div><div class=\"line\">port 端口</div><div class=\"line\"></div><div class=\"line\">pathName 路径名</div><div class=\"line\"></div><div class=\"line\">QueryParameter 查询参数</div></pre></td></tr></table></figure></p>\n<p>我们使用 intent.data 可以接收到这个uri。<br>这里要提一下 uri 和 url 的区别。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">首先，URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。</div><div class=\"line\">而URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。</div><div class=\"line\">而URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:java-net@java.sun.com。</div><div class=\"line\">也就是说，URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。</div><div class=\"line\"></div><div class=\"line\">在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而URL类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的，schema必须被指定。</div></pre></td></tr></table></figure></p>\n<p>我们使用 intent.data 接收到的是一个 Uri 的对象，我们可以通过该对象获取到我们需要的信息。<br>我的做法是建立一个 UrlDispatcher，在 application 中初始化，用来接受和处理 url。<br>要实现隐式跳转的第一步就是在清单文件中注册 Intent 过滤器。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">   <span class=\"attr\">android:name</span>=<span class=\"string\">\".ui.common.account.UserNameActivity\"</span></div><div class=\"line\">   <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"singleTop\"</span>&gt;</div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.VIEW\"</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.BROWSABLE\"</span>/&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:scheme</span>=<span class=\"string\">\"zhuyl\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这样我们就可以接收到域名协议为 zhuyl 的 url 了。<br>再来看看我们的 UrlDispatcher。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var actions: MutableMap&lt;String, (MutableMap&lt;String, String&gt;) -&gt; Unit&gt; = HashMap()</div><div class=\"line\">val url = uri.host + uri.path</div><div class=\"line\">val action = <span class=\"keyword\">if</span> (url.endsWith(<span class=\"string\">\"/\"</span>)) url.dropLast(<span class=\"number\">1</span>) <span class=\"keyword\">else</span> url</div><div class=\"line\"></div><div class=\"line\">val params: MutableMap&lt;String, String&gt; = HashMap()</div><div class=\"line\">uri.queryParameterNames.forEach &#123;</div><div class=\"line\">    val parameter = uri.getQueryParameter(it)</div><div class=\"line\">    params[it] = parameter</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">actions[action]?.invoke(params)</div></pre></td></tr></table></figure></p>\n<p>而我们根据 action 来判断调用的方法。<br>举个例子。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">zhuyl://open_link/?url=https://baidu.com</div></pre></td></tr></table></figure></p>\n<p>通过我们的代码解析后，可以得到 action 为 “open_link”<br>那么<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">actions[<span class=\"string\">\"open_link\"</span>] = &#123; params -&gt;</div><div class=\"line\">   val intent = Intent(application, SecondActivity::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></div><div class=\"line\">   <span class=\"title\">val</span> <span class=\"title\">url</span> = params[<span class=\"string\">\"url\"</span>]</div><div class=\"line\">   intent.putExtra(<span class=\"string\">\"url\"</span>, url)</div><div class=\"line\">   intentToActivity(intent)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样做，我们在调用 url 启动 activity 的时候就可以拥有一种比较优雅的跳转方式了。<br>当然，从网页端发出的跳转也就可以处理了。</p>\n"},{"title":"Material Design 学习笔记 1","date":"2016-11-07T07:31:25.000Z","_content":"首先，安利我最喜欢的手机品牌： HTC。\n2012年我高中毕业的暑假，入手了第一款 Android 智能手机——HTC的one S，这是一款非常让人心动的产品，双核 + 1G内存的配置在那个时代也是仅次于诸如三星s3、HTC one X等旗舰的存在，但相比于同学手中的iOS，我们不得不承认，即使是以华丽而著称的Sense UI，也是足够的简陋，更不用说原生UI。Android 总有那么多让我不满意的地方，还好Android可以刷机，百度云ROM是我刷的第一个ROM，当然还有以后的MIUI。\n好了，以上都是废话，我想表达的只是那个时候的 Android 真的很不好看，或者说。。。丑陋。\n所以当Google 2013年 I／O大会公布了全新设计风格 —— Material Design，我的感觉只有“惊艳”能形容。\n当然，后来由于对 Android 的执着和喜爱，我也成为了一名 Android 开发。并且在毕业设计，一款名叫《小白》的应用中把自己对Material Design 简陋的理解用了上去（真的很简陋，没有美工的痛啊…）。\n刚刚进入公司的时候，公司的 Android 应用也是采用了与 iOS 相符的设计，后来新风格改版，采用了 Material Design。这次的改版也让我更加深入地去了解 Material Design 的开发，包括 Android Design Support Library 等的使用。\n在学习的过程中我翻译了一篇有关于 Material Design 的文章。\n\n## 译文\n### Material Design 的真正价值\nGoogle 的 Material Design 在设计中是最有影响力的一种视觉理念。因为明确 了设计和可用性指南，它成为塑造人们看到并与接口交互的方式。\n但是，Material Design 已经超越了 Google 和 Android 程序本身。\n设计师们在很多层面使用这种设计理念——尤其是分层接口的概念。顾名思义， 也就是分层叠加多个元素。就好像一副卡片，要创造一个单一而又统一的体验，那 就是功能性和美观性。\n让我们来谈谈 Material Design。\n分层的概念元素在一个接口并不是一个新概念。然而,Material Design 则更进 一步,触觉体验结合大胆的和充满活力的审美。\n在我们继续之前，让我们先确认一下我们在同样的页面上什么是 Material Design。让我们来看一下:\nMaterial Design 是 Google 的一种设计理念，它概述了在移动设备上应用程序 应该如何工作。他打破了一切——包括动画、风格、布局，给了模式、组件和可用 性以指导。\nGoogle 是这么说的:“我们挑战了自己，为我们的用户创造了一个综合好的设 计的经典原则的创新的设计语言和科技的可行性。这就是 Material Design。”\nMaterial Design 开始于手机，但很快就扩展到其他设备上。它包括以下几个原则:\n1.现实的视觉元素:设计就是基于现实，就好像在用纸张和墨水进行设计。\n2.大胆的、形象的和故意的:基本设计技术驱动了视觉效果，排版、网格、空 间、比例、颜色和图像主导着整个设计，理论建立在一个用清晰的层次结构定义了 的空间上，颜色和类型的选择是大胆的而又经过深思熟虑的。\n3.手势提供了意义:动画是 Material Design 的一个关键的组成部分，但它不 能仅仅为了移动而动。动画需要发生在一个单独的环境,重点设计和服务于包括简 单和容易的转换。动作和手势应该客观的反映物理世界。\n\n理解“触觉表面”的含义\n\n还有一个我们经常在布局接口会谈论到的事情是“触觉表面”。 我们可以想象一下很多张纸叠在一起来构造一个框架来进行设计是如何实现\n的。这些纸和现实生活中的纸还是有点不同的，因为他们的形状和形式可以任意修\n改——如拉伸和弯曲——但他们以一种看似真实的方式工作着。\n如一篇文章《Mobile Design Trends 2015 & 2016》中提到的，把触觉表面当 做一个容器来容纳信息。在设计中容器本身是平的，但有一个淡淡的阴影来区别其 他的容器和分层。当然还有其他方法来在层级之间做间隔——比如纹理和渐变—— 当然这其实是没必要的。\n以一个很好的 app Reddit 为例，你可以清晰地看见它层级之间的分隔。有一个 冒险的顶级菜单层包含着主要内容，甚至是分层的主要顶部图像包含元素和阴影强 调三维触觉表面。\n据文章《Android Lollipop UI Kit》证明:一个触觉表面可以清晰地确定内容 在设计方面的功能和联系(每一个容器都有自己的本质工作，比如说一个链接或者 一个视频播放器)。这种方法同样建立了深度，因为其他容器元素是分层的，由此 创建了一个三维世界\n\nMATERIAL DESIGN 是一个自适应的设计\n\n分层接口的本质是为了适应设计，所有的设计指导方针实际上是鼓励设计师使用一种自适应的布局(但是，你是否喜欢自适应的布局还有待考证)。 当我们考虑分层接口的时候，考虑两个元素之间的关联是非常重要的。 Google 给出的设计标准中提到:“灵活地使用网格，可以保证布局的一致性、断点的内容在不同的屏幕可以实现回转，并且描述了 app 如何从小屏幕适应到超大 型的屏幕。”\n注意事项包括:\n\n断点:宽度包括 480, 600, 840, 960, 1280, 1440 和 1600 像素。\n网格:12 列的有边缘的网格和一个基线网格。\n表面行为:UI 适应屏幕的类型所以他的表面是可见或者隐藏的。\n绘制:功能根据屏幕的大小，包含显示、转变、扩张、回流和分离。 这些注意事项确保了设计师的适应性接口在任何情况任何设备上可以使用。它们为设计师提供了一个基础来构建在桌面、平板电脑、手机上的布局。\nMATERIAL DESIGN 和其他设计的趋势\n\n当涉及到分层界面时，其他设计趋势也会发挥自己的作用。\nMaterial Design 从平面美学和其他流行的技术借鉴了大量的设计理念，事实上，很多人认为 Material Design 非常接近平面设计 2.0，因为很多视觉效果非常 相像。\n单独的分层界面从完全平面设计转变过来需要创造更多的三维空间和明暗度。 本质上来说，设计师们在扁平化设计上已经带回了一些经验，但有所不同的是，他 们利用这些技术来提高可用性，而不是单纯为了装饰。\n分层设计的颜色最大程度上满足扁平化设计的审美，而其中最大的不同就是 Google 提供了大量的颜色选项。面板颜色是一样的——明亮、大胆以及充分的饱和 的颜色。\n很多设计师在设计的时候选择了红色和蓝色进行设计，但似乎更多的部分喜欢 深紫色和黄色，这可能是因为这些颜色更容易搭配白色和黑色的文本。\n接口分层在极简主义的空间里也表现的非常好，特别是在排版方面。清晰地层 级和无衬线的字体是首选。Google 建议使用 Roboto 为主要字体，它有很多选择， 从常规到粗体到斜体。\n这样的多样化帮助用户在原理上进行导向。按照极简主义，只要你按照适当的 模型和比例，一种字体几乎可以做到所有的事情。\n现在你已经很难找到一个网站没有全屏的图像以及进一步生动的使用分层接口 的。\n比如这个 Field Trip 的 app，如上文所述，使照片最大化的发挥价值，表示 Material Design 不仅仅是使用颜色、照片和视觉冲击效果——他们都是设计的一 个组成部分。\n最后，就像我们之前讨论的那样，分层接口最终表现为卡片的形式。透过实例 我们可以看到，几乎所有的设计都包含了类似于卡片的设计，从小卡片到全屏幕选 项，这些趋势携手并进。\n\n谁是下一个?\n\nGoogle 在 7 月发布了几个新的指导方针，Material Design Lite，由此，所有 设计人员都可以使他们的网站或者应用程序看起来像 Android 程序。\n就像《Mobile Design Trends 2015 & 2016》一书中建议的那样，我们可能会\n越来越多的看到 Android 的特点，可能甚至会在 ios 应用和别的地方。Material Design 看起来非常的不错，而且他在很多地方表现的非常好。设计者将会利用 lite 版本提供的完美指导水平。\nMaterial Design Lite 也是一种很好的工具,可以让设计人员和开发人员想要 创建一个统一的应用体验整个 Android 和 iOS 平台时使用，让应用看起来和使用起 来有一致的用户体验，哪怕在不同的设备上面。\n图层一定会停留一段时间，但是整体可能看起来会是更分层以及更少的材料。 所以那种设计会间与 Material Design Lite 和 ios 的设计标准之间。\nios 的应用 Weather Channel 已经使用了这种方法。整个应用基于卡片、色彩 和图像，在卡片的使用、图像的几何形状方面等方面理论是重叠的。因为缺乏深度 和模仿导致整个 app 看起来更加可以修改。\n渐变和单色的图层也在以另一种方式增长着。Monochromatic color palettes 是一个经典的设计技术，它使得创建的元素几乎可以适用于任何类型的内容。\nios 应用 Elevate 使用了一个渐变的背景在它的设计上，它的动画和运动形态 非常符合 Material Design 的标准，当然，使用渐变色不是。这个简单的亮点使得 使得设计开始打破传统的规则而不影响其原有的功能。\n设计师们会在更深的颜色和色调方面继续发扬分层接口和 Material Design。 现在多数的 app 都采用了浅色和白色的设计风格，但更多的深色风格即将出现。\nWeather TimeLiness 就是一个很好的例子。简单的改变颜色就足以使这款应用 脱颖而出。它分层的风格非常明显，但深色界面使得它看起来简洁而又优雅。整个 设计看起来更饱和、缓和和具有深色的审美。\n顺便说一句。今天这样的分层接口设计仍然只是一个开始，作为设计师成长的 一部分，简单的视觉风格和高可用性的设计风格仍然会继续出现，不仅仅是在 Android 上，而是会引领整个潮流。更有趣的是，分层界面的外观本身就是一个可 扩展的设计技术，在未来几年，包括极简主义和平面设计主义在内的设计风格将会 变得越来越流行。\n在某种程度上，这种设计风格可能会撼动那些拟物化的设计风格很多，但那些 事情发生之前，这个概念似乎已经完全站稳了脚跟，变得真实。\n","source":"_posts/about-material-design-1.md","raw":"---\ntitle: Material Design 学习笔记 1\ndate: 2016-11-07 15:31:25\ntags: Android\n---\n首先，安利我最喜欢的手机品牌： HTC。\n2012年我高中毕业的暑假，入手了第一款 Android 智能手机——HTC的one S，这是一款非常让人心动的产品，双核 + 1G内存的配置在那个时代也是仅次于诸如三星s3、HTC one X等旗舰的存在，但相比于同学手中的iOS，我们不得不承认，即使是以华丽而著称的Sense UI，也是足够的简陋，更不用说原生UI。Android 总有那么多让我不满意的地方，还好Android可以刷机，百度云ROM是我刷的第一个ROM，当然还有以后的MIUI。\n好了，以上都是废话，我想表达的只是那个时候的 Android 真的很不好看，或者说。。。丑陋。\n所以当Google 2013年 I／O大会公布了全新设计风格 —— Material Design，我的感觉只有“惊艳”能形容。\n当然，后来由于对 Android 的执着和喜爱，我也成为了一名 Android 开发。并且在毕业设计，一款名叫《小白》的应用中把自己对Material Design 简陋的理解用了上去（真的很简陋，没有美工的痛啊…）。\n刚刚进入公司的时候，公司的 Android 应用也是采用了与 iOS 相符的设计，后来新风格改版，采用了 Material Design。这次的改版也让我更加深入地去了解 Material Design 的开发，包括 Android Design Support Library 等的使用。\n在学习的过程中我翻译了一篇有关于 Material Design 的文章。\n\n## 译文\n### Material Design 的真正价值\nGoogle 的 Material Design 在设计中是最有影响力的一种视觉理念。因为明确 了设计和可用性指南，它成为塑造人们看到并与接口交互的方式。\n但是，Material Design 已经超越了 Google 和 Android 程序本身。\n设计师们在很多层面使用这种设计理念——尤其是分层接口的概念。顾名思义， 也就是分层叠加多个元素。就好像一副卡片，要创造一个单一而又统一的体验，那 就是功能性和美观性。\n让我们来谈谈 Material Design。\n分层的概念元素在一个接口并不是一个新概念。然而,Material Design 则更进 一步,触觉体验结合大胆的和充满活力的审美。\n在我们继续之前，让我们先确认一下我们在同样的页面上什么是 Material Design。让我们来看一下:\nMaterial Design 是 Google 的一种设计理念，它概述了在移动设备上应用程序 应该如何工作。他打破了一切——包括动画、风格、布局，给了模式、组件和可用 性以指导。\nGoogle 是这么说的:“我们挑战了自己，为我们的用户创造了一个综合好的设 计的经典原则的创新的设计语言和科技的可行性。这就是 Material Design。”\nMaterial Design 开始于手机，但很快就扩展到其他设备上。它包括以下几个原则:\n1.现实的视觉元素:设计就是基于现实，就好像在用纸张和墨水进行设计。\n2.大胆的、形象的和故意的:基本设计技术驱动了视觉效果，排版、网格、空 间、比例、颜色和图像主导着整个设计，理论建立在一个用清晰的层次结构定义了 的空间上，颜色和类型的选择是大胆的而又经过深思熟虑的。\n3.手势提供了意义:动画是 Material Design 的一个关键的组成部分，但它不 能仅仅为了移动而动。动画需要发生在一个单独的环境,重点设计和服务于包括简 单和容易的转换。动作和手势应该客观的反映物理世界。\n\n理解“触觉表面”的含义\n\n还有一个我们经常在布局接口会谈论到的事情是“触觉表面”。 我们可以想象一下很多张纸叠在一起来构造一个框架来进行设计是如何实现\n的。这些纸和现实生活中的纸还是有点不同的，因为他们的形状和形式可以任意修\n改——如拉伸和弯曲——但他们以一种看似真实的方式工作着。\n如一篇文章《Mobile Design Trends 2015 & 2016》中提到的，把触觉表面当 做一个容器来容纳信息。在设计中容器本身是平的，但有一个淡淡的阴影来区别其 他的容器和分层。当然还有其他方法来在层级之间做间隔——比如纹理和渐变—— 当然这其实是没必要的。\n以一个很好的 app Reddit 为例，你可以清晰地看见它层级之间的分隔。有一个 冒险的顶级菜单层包含着主要内容，甚至是分层的主要顶部图像包含元素和阴影强 调三维触觉表面。\n据文章《Android Lollipop UI Kit》证明:一个触觉表面可以清晰地确定内容 在设计方面的功能和联系(每一个容器都有自己的本质工作，比如说一个链接或者 一个视频播放器)。这种方法同样建立了深度，因为其他容器元素是分层的，由此 创建了一个三维世界\n\nMATERIAL DESIGN 是一个自适应的设计\n\n分层接口的本质是为了适应设计，所有的设计指导方针实际上是鼓励设计师使用一种自适应的布局(但是，你是否喜欢自适应的布局还有待考证)。 当我们考虑分层接口的时候，考虑两个元素之间的关联是非常重要的。 Google 给出的设计标准中提到:“灵活地使用网格，可以保证布局的一致性、断点的内容在不同的屏幕可以实现回转，并且描述了 app 如何从小屏幕适应到超大 型的屏幕。”\n注意事项包括:\n\n断点:宽度包括 480, 600, 840, 960, 1280, 1440 和 1600 像素。\n网格:12 列的有边缘的网格和一个基线网格。\n表面行为:UI 适应屏幕的类型所以他的表面是可见或者隐藏的。\n绘制:功能根据屏幕的大小，包含显示、转变、扩张、回流和分离。 这些注意事项确保了设计师的适应性接口在任何情况任何设备上可以使用。它们为设计师提供了一个基础来构建在桌面、平板电脑、手机上的布局。\nMATERIAL DESIGN 和其他设计的趋势\n\n当涉及到分层界面时，其他设计趋势也会发挥自己的作用。\nMaterial Design 从平面美学和其他流行的技术借鉴了大量的设计理念，事实上，很多人认为 Material Design 非常接近平面设计 2.0，因为很多视觉效果非常 相像。\n单独的分层界面从完全平面设计转变过来需要创造更多的三维空间和明暗度。 本质上来说，设计师们在扁平化设计上已经带回了一些经验，但有所不同的是，他 们利用这些技术来提高可用性，而不是单纯为了装饰。\n分层设计的颜色最大程度上满足扁平化设计的审美，而其中最大的不同就是 Google 提供了大量的颜色选项。面板颜色是一样的——明亮、大胆以及充分的饱和 的颜色。\n很多设计师在设计的时候选择了红色和蓝色进行设计，但似乎更多的部分喜欢 深紫色和黄色，这可能是因为这些颜色更容易搭配白色和黑色的文本。\n接口分层在极简主义的空间里也表现的非常好，特别是在排版方面。清晰地层 级和无衬线的字体是首选。Google 建议使用 Roboto 为主要字体，它有很多选择， 从常规到粗体到斜体。\n这样的多样化帮助用户在原理上进行导向。按照极简主义，只要你按照适当的 模型和比例，一种字体几乎可以做到所有的事情。\n现在你已经很难找到一个网站没有全屏的图像以及进一步生动的使用分层接口 的。\n比如这个 Field Trip 的 app，如上文所述，使照片最大化的发挥价值，表示 Material Design 不仅仅是使用颜色、照片和视觉冲击效果——他们都是设计的一 个组成部分。\n最后，就像我们之前讨论的那样，分层接口最终表现为卡片的形式。透过实例 我们可以看到，几乎所有的设计都包含了类似于卡片的设计，从小卡片到全屏幕选 项，这些趋势携手并进。\n\n谁是下一个?\n\nGoogle 在 7 月发布了几个新的指导方针，Material Design Lite，由此，所有 设计人员都可以使他们的网站或者应用程序看起来像 Android 程序。\n就像《Mobile Design Trends 2015 & 2016》一书中建议的那样，我们可能会\n越来越多的看到 Android 的特点，可能甚至会在 ios 应用和别的地方。Material Design 看起来非常的不错，而且他在很多地方表现的非常好。设计者将会利用 lite 版本提供的完美指导水平。\nMaterial Design Lite 也是一种很好的工具,可以让设计人员和开发人员想要 创建一个统一的应用体验整个 Android 和 iOS 平台时使用，让应用看起来和使用起 来有一致的用户体验，哪怕在不同的设备上面。\n图层一定会停留一段时间，但是整体可能看起来会是更分层以及更少的材料。 所以那种设计会间与 Material Design Lite 和 ios 的设计标准之间。\nios 的应用 Weather Channel 已经使用了这种方法。整个应用基于卡片、色彩 和图像，在卡片的使用、图像的几何形状方面等方面理论是重叠的。因为缺乏深度 和模仿导致整个 app 看起来更加可以修改。\n渐变和单色的图层也在以另一种方式增长着。Monochromatic color palettes 是一个经典的设计技术，它使得创建的元素几乎可以适用于任何类型的内容。\nios 应用 Elevate 使用了一个渐变的背景在它的设计上，它的动画和运动形态 非常符合 Material Design 的标准，当然，使用渐变色不是。这个简单的亮点使得 使得设计开始打破传统的规则而不影响其原有的功能。\n设计师们会在更深的颜色和色调方面继续发扬分层接口和 Material Design。 现在多数的 app 都采用了浅色和白色的设计风格，但更多的深色风格即将出现。\nWeather TimeLiness 就是一个很好的例子。简单的改变颜色就足以使这款应用 脱颖而出。它分层的风格非常明显，但深色界面使得它看起来简洁而又优雅。整个 设计看起来更饱和、缓和和具有深色的审美。\n顺便说一句。今天这样的分层接口设计仍然只是一个开始，作为设计师成长的 一部分，简单的视觉风格和高可用性的设计风格仍然会继续出现，不仅仅是在 Android 上，而是会引领整个潮流。更有趣的是，分层界面的外观本身就是一个可 扩展的设计技术，在未来几年，包括极简主义和平面设计主义在内的设计风格将会 变得越来越流行。\n在某种程度上，这种设计风格可能会撼动那些拟物化的设计风格很多，但那些 事情发生之前，这个概念似乎已经完全站稳了脚跟，变得真实。\n","slug":"about-material-design-1","published":1,"updated":"2018-03-19T08:18:01.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjexzddqn0004056w2bj2b6jo","content":"<p>首先，安利我最喜欢的手机品牌： HTC。<br>2012年我高中毕业的暑假，入手了第一款 Android 智能手机——HTC的one S，这是一款非常让人心动的产品，双核 + 1G内存的配置在那个时代也是仅次于诸如三星s3、HTC one X等旗舰的存在，但相比于同学手中的iOS，我们不得不承认，即使是以华丽而著称的Sense UI，也是足够的简陋，更不用说原生UI。Android 总有那么多让我不满意的地方，还好Android可以刷机，百度云ROM是我刷的第一个ROM，当然还有以后的MIUI。<br>好了，以上都是废话，我想表达的只是那个时候的 Android 真的很不好看，或者说。。。丑陋。<br>所以当Google 2013年 I／O大会公布了全新设计风格 —— Material Design，我的感觉只有“惊艳”能形容。<br>当然，后来由于对 Android 的执着和喜爱，我也成为了一名 Android 开发。并且在毕业设计，一款名叫《小白》的应用中把自己对Material Design 简陋的理解用了上去（真的很简陋，没有美工的痛啊…）。<br>刚刚进入公司的时候，公司的 Android 应用也是采用了与 iOS 相符的设计，后来新风格改版，采用了 Material Design。这次的改版也让我更加深入地去了解 Material Design 的开发，包括 Android Design Support Library 等的使用。<br>在学习的过程中我翻译了一篇有关于 Material Design 的文章。</p>\n<h2 id=\"译文\"><a href=\"#译文\" class=\"headerlink\" title=\"译文\"></a>译文</h2><h3 id=\"Material-Design-的真正价值\"><a href=\"#Material-Design-的真正价值\" class=\"headerlink\" title=\"Material Design 的真正价值\"></a>Material Design 的真正价值</h3><p>Google 的 Material Design 在设计中是最有影响力的一种视觉理念。因为明确 了设计和可用性指南，它成为塑造人们看到并与接口交互的方式。<br>但是，Material Design 已经超越了 Google 和 Android 程序本身。<br>设计师们在很多层面使用这种设计理念——尤其是分层接口的概念。顾名思义， 也就是分层叠加多个元素。就好像一副卡片，要创造一个单一而又统一的体验，那 就是功能性和美观性。<br>让我们来谈谈 Material Design。<br>分层的概念元素在一个接口并不是一个新概念。然而,Material Design 则更进 一步,触觉体验结合大胆的和充满活力的审美。<br>在我们继续之前，让我们先确认一下我们在同样的页面上什么是 Material Design。让我们来看一下:<br>Material Design 是 Google 的一种设计理念，它概述了在移动设备上应用程序 应该如何工作。他打破了一切——包括动画、风格、布局，给了模式、组件和可用 性以指导。<br>Google 是这么说的:“我们挑战了自己，为我们的用户创造了一个综合好的设 计的经典原则的创新的设计语言和科技的可行性。这就是 Material Design。”<br>Material Design 开始于手机，但很快就扩展到其他设备上。它包括以下几个原则:<br>1.现实的视觉元素:设计就是基于现实，就好像在用纸张和墨水进行设计。<br>2.大胆的、形象的和故意的:基本设计技术驱动了视觉效果，排版、网格、空 间、比例、颜色和图像主导着整个设计，理论建立在一个用清晰的层次结构定义了 的空间上，颜色和类型的选择是大胆的而又经过深思熟虑的。<br>3.手势提供了意义:动画是 Material Design 的一个关键的组成部分，但它不 能仅仅为了移动而动。动画需要发生在一个单独的环境,重点设计和服务于包括简 单和容易的转换。动作和手势应该客观的反映物理世界。</p>\n<p>理解“触觉表面”的含义</p>\n<p>还有一个我们经常在布局接口会谈论到的事情是“触觉表面”。 我们可以想象一下很多张纸叠在一起来构造一个框架来进行设计是如何实现<br>的。这些纸和现实生活中的纸还是有点不同的，因为他们的形状和形式可以任意修<br>改——如拉伸和弯曲——但他们以一种看似真实的方式工作着。<br>如一篇文章《Mobile Design Trends 2015 &amp; 2016》中提到的，把触觉表面当 做一个容器来容纳信息。在设计中容器本身是平的，但有一个淡淡的阴影来区别其 他的容器和分层。当然还有其他方法来在层级之间做间隔——比如纹理和渐变—— 当然这其实是没必要的。<br>以一个很好的 app Reddit 为例，你可以清晰地看见它层级之间的分隔。有一个 冒险的顶级菜单层包含着主要内容，甚至是分层的主要顶部图像包含元素和阴影强 调三维触觉表面。<br>据文章《Android Lollipop UI Kit》证明:一个触觉表面可以清晰地确定内容 在设计方面的功能和联系(每一个容器都有自己的本质工作，比如说一个链接或者 一个视频播放器)。这种方法同样建立了深度，因为其他容器元素是分层的，由此 创建了一个三维世界</p>\n<p>MATERIAL DESIGN 是一个自适应的设计</p>\n<p>分层接口的本质是为了适应设计，所有的设计指导方针实际上是鼓励设计师使用一种自适应的布局(但是，你是否喜欢自适应的布局还有待考证)。 当我们考虑分层接口的时候，考虑两个元素之间的关联是非常重要的。 Google 给出的设计标准中提到:“灵活地使用网格，可以保证布局的一致性、断点的内容在不同的屏幕可以实现回转，并且描述了 app 如何从小屏幕适应到超大 型的屏幕。”<br>注意事项包括:</p>\n<p>断点:宽度包括 480, 600, 840, 960, 1280, 1440 和 1600 像素。<br>网格:12 列的有边缘的网格和一个基线网格。<br>表面行为:UI 适应屏幕的类型所以他的表面是可见或者隐藏的。<br>绘制:功能根据屏幕的大小，包含显示、转变、扩张、回流和分离。 这些注意事项确保了设计师的适应性接口在任何情况任何设备上可以使用。它们为设计师提供了一个基础来构建在桌面、平板电脑、手机上的布局。<br>MATERIAL DESIGN 和其他设计的趋势</p>\n<p>当涉及到分层界面时，其他设计趋势也会发挥自己的作用。<br>Material Design 从平面美学和其他流行的技术借鉴了大量的设计理念，事实上，很多人认为 Material Design 非常接近平面设计 2.0，因为很多视觉效果非常 相像。<br>单独的分层界面从完全平面设计转变过来需要创造更多的三维空间和明暗度。 本质上来说，设计师们在扁平化设计上已经带回了一些经验，但有所不同的是，他 们利用这些技术来提高可用性，而不是单纯为了装饰。<br>分层设计的颜色最大程度上满足扁平化设计的审美，而其中最大的不同就是 Google 提供了大量的颜色选项。面板颜色是一样的——明亮、大胆以及充分的饱和 的颜色。<br>很多设计师在设计的时候选择了红色和蓝色进行设计，但似乎更多的部分喜欢 深紫色和黄色，这可能是因为这些颜色更容易搭配白色和黑色的文本。<br>接口分层在极简主义的空间里也表现的非常好，特别是在排版方面。清晰地层 级和无衬线的字体是首选。Google 建议使用 Roboto 为主要字体，它有很多选择， 从常规到粗体到斜体。<br>这样的多样化帮助用户在原理上进行导向。按照极简主义，只要你按照适当的 模型和比例，一种字体几乎可以做到所有的事情。<br>现在你已经很难找到一个网站没有全屏的图像以及进一步生动的使用分层接口 的。<br>比如这个 Field Trip 的 app，如上文所述，使照片最大化的发挥价值，表示 Material Design 不仅仅是使用颜色、照片和视觉冲击效果——他们都是设计的一 个组成部分。<br>最后，就像我们之前讨论的那样，分层接口最终表现为卡片的形式。透过实例 我们可以看到，几乎所有的设计都包含了类似于卡片的设计，从小卡片到全屏幕选 项，这些趋势携手并进。</p>\n<p>谁是下一个?</p>\n<p>Google 在 7 月发布了几个新的指导方针，Material Design Lite，由此，所有 设计人员都可以使他们的网站或者应用程序看起来像 Android 程序。<br>就像《Mobile Design Trends 2015 &amp; 2016》一书中建议的那样，我们可能会<br>越来越多的看到 Android 的特点，可能甚至会在 ios 应用和别的地方。Material Design 看起来非常的不错，而且他在很多地方表现的非常好。设计者将会利用 lite 版本提供的完美指导水平。<br>Material Design Lite 也是一种很好的工具,可以让设计人员和开发人员想要 创建一个统一的应用体验整个 Android 和 iOS 平台时使用，让应用看起来和使用起 来有一致的用户体验，哪怕在不同的设备上面。<br>图层一定会停留一段时间，但是整体可能看起来会是更分层以及更少的材料。 所以那种设计会间与 Material Design Lite 和 ios 的设计标准之间。<br>ios 的应用 Weather Channel 已经使用了这种方法。整个应用基于卡片、色彩 和图像，在卡片的使用、图像的几何形状方面等方面理论是重叠的。因为缺乏深度 和模仿导致整个 app 看起来更加可以修改。<br>渐变和单色的图层也在以另一种方式增长着。Monochromatic color palettes 是一个经典的设计技术，它使得创建的元素几乎可以适用于任何类型的内容。<br>ios 应用 Elevate 使用了一个渐变的背景在它的设计上，它的动画和运动形态 非常符合 Material Design 的标准，当然，使用渐变色不是。这个简单的亮点使得 使得设计开始打破传统的规则而不影响其原有的功能。<br>设计师们会在更深的颜色和色调方面继续发扬分层接口和 Material Design。 现在多数的 app 都采用了浅色和白色的设计风格，但更多的深色风格即将出现。<br>Weather TimeLiness 就是一个很好的例子。简单的改变颜色就足以使这款应用 脱颖而出。它分层的风格非常明显，但深色界面使得它看起来简洁而又优雅。整个 设计看起来更饱和、缓和和具有深色的审美。<br>顺便说一句。今天这样的分层接口设计仍然只是一个开始，作为设计师成长的 一部分，简单的视觉风格和高可用性的设计风格仍然会继续出现，不仅仅是在 Android 上，而是会引领整个潮流。更有趣的是，分层界面的外观本身就是一个可 扩展的设计技术，在未来几年，包括极简主义和平面设计主义在内的设计风格将会 变得越来越流行。<br>在某种程度上，这种设计风格可能会撼动那些拟物化的设计风格很多，但那些 事情发生之前，这个概念似乎已经完全站稳了脚跟，变得真实。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先，安利我最喜欢的手机品牌： HTC。<br>2012年我高中毕业的暑假，入手了第一款 Android 智能手机——HTC的one S，这是一款非常让人心动的产品，双核 + 1G内存的配置在那个时代也是仅次于诸如三星s3、HTC one X等旗舰的存在，但相比于同学手中的iOS，我们不得不承认，即使是以华丽而著称的Sense UI，也是足够的简陋，更不用说原生UI。Android 总有那么多让我不满意的地方，还好Android可以刷机，百度云ROM是我刷的第一个ROM，当然还有以后的MIUI。<br>好了，以上都是废话，我想表达的只是那个时候的 Android 真的很不好看，或者说。。。丑陋。<br>所以当Google 2013年 I／O大会公布了全新设计风格 —— Material Design，我的感觉只有“惊艳”能形容。<br>当然，后来由于对 Android 的执着和喜爱，我也成为了一名 Android 开发。并且在毕业设计，一款名叫《小白》的应用中把自己对Material Design 简陋的理解用了上去（真的很简陋，没有美工的痛啊…）。<br>刚刚进入公司的时候，公司的 Android 应用也是采用了与 iOS 相符的设计，后来新风格改版，采用了 Material Design。这次的改版也让我更加深入地去了解 Material Design 的开发，包括 Android Design Support Library 等的使用。<br>在学习的过程中我翻译了一篇有关于 Material Design 的文章。</p>\n<h2 id=\"译文\"><a href=\"#译文\" class=\"headerlink\" title=\"译文\"></a>译文</h2><h3 id=\"Material-Design-的真正价值\"><a href=\"#Material-Design-的真正价值\" class=\"headerlink\" title=\"Material Design 的真正价值\"></a>Material Design 的真正价值</h3><p>Google 的 Material Design 在设计中是最有影响力的一种视觉理念。因为明确 了设计和可用性指南，它成为塑造人们看到并与接口交互的方式。<br>但是，Material Design 已经超越了 Google 和 Android 程序本身。<br>设计师们在很多层面使用这种设计理念——尤其是分层接口的概念。顾名思义， 也就是分层叠加多个元素。就好像一副卡片，要创造一个单一而又统一的体验，那 就是功能性和美观性。<br>让我们来谈谈 Material Design。<br>分层的概念元素在一个接口并不是一个新概念。然而,Material Design 则更进 一步,触觉体验结合大胆的和充满活力的审美。<br>在我们继续之前，让我们先确认一下我们在同样的页面上什么是 Material Design。让我们来看一下:<br>Material Design 是 Google 的一种设计理念，它概述了在移动设备上应用程序 应该如何工作。他打破了一切——包括动画、风格、布局，给了模式、组件和可用 性以指导。<br>Google 是这么说的:“我们挑战了自己，为我们的用户创造了一个综合好的设 计的经典原则的创新的设计语言和科技的可行性。这就是 Material Design。”<br>Material Design 开始于手机，但很快就扩展到其他设备上。它包括以下几个原则:<br>1.现实的视觉元素:设计就是基于现实，就好像在用纸张和墨水进行设计。<br>2.大胆的、形象的和故意的:基本设计技术驱动了视觉效果，排版、网格、空 间、比例、颜色和图像主导着整个设计，理论建立在一个用清晰的层次结构定义了 的空间上，颜色和类型的选择是大胆的而又经过深思熟虑的。<br>3.手势提供了意义:动画是 Material Design 的一个关键的组成部分，但它不 能仅仅为了移动而动。动画需要发生在一个单独的环境,重点设计和服务于包括简 单和容易的转换。动作和手势应该客观的反映物理世界。</p>\n<p>理解“触觉表面”的含义</p>\n<p>还有一个我们经常在布局接口会谈论到的事情是“触觉表面”。 我们可以想象一下很多张纸叠在一起来构造一个框架来进行设计是如何实现<br>的。这些纸和现实生活中的纸还是有点不同的，因为他们的形状和形式可以任意修<br>改——如拉伸和弯曲——但他们以一种看似真实的方式工作着。<br>如一篇文章《Mobile Design Trends 2015 &amp; 2016》中提到的，把触觉表面当 做一个容器来容纳信息。在设计中容器本身是平的，但有一个淡淡的阴影来区别其 他的容器和分层。当然还有其他方法来在层级之间做间隔——比如纹理和渐变—— 当然这其实是没必要的。<br>以一个很好的 app Reddit 为例，你可以清晰地看见它层级之间的分隔。有一个 冒险的顶级菜单层包含着主要内容，甚至是分层的主要顶部图像包含元素和阴影强 调三维触觉表面。<br>据文章《Android Lollipop UI Kit》证明:一个触觉表面可以清晰地确定内容 在设计方面的功能和联系(每一个容器都有自己的本质工作，比如说一个链接或者 一个视频播放器)。这种方法同样建立了深度，因为其他容器元素是分层的，由此 创建了一个三维世界</p>\n<p>MATERIAL DESIGN 是一个自适应的设计</p>\n<p>分层接口的本质是为了适应设计，所有的设计指导方针实际上是鼓励设计师使用一种自适应的布局(但是，你是否喜欢自适应的布局还有待考证)。 当我们考虑分层接口的时候，考虑两个元素之间的关联是非常重要的。 Google 给出的设计标准中提到:“灵活地使用网格，可以保证布局的一致性、断点的内容在不同的屏幕可以实现回转，并且描述了 app 如何从小屏幕适应到超大 型的屏幕。”<br>注意事项包括:</p>\n<p>断点:宽度包括 480, 600, 840, 960, 1280, 1440 和 1600 像素。<br>网格:12 列的有边缘的网格和一个基线网格。<br>表面行为:UI 适应屏幕的类型所以他的表面是可见或者隐藏的。<br>绘制:功能根据屏幕的大小，包含显示、转变、扩张、回流和分离。 这些注意事项确保了设计师的适应性接口在任何情况任何设备上可以使用。它们为设计师提供了一个基础来构建在桌面、平板电脑、手机上的布局。<br>MATERIAL DESIGN 和其他设计的趋势</p>\n<p>当涉及到分层界面时，其他设计趋势也会发挥自己的作用。<br>Material Design 从平面美学和其他流行的技术借鉴了大量的设计理念，事实上，很多人认为 Material Design 非常接近平面设计 2.0，因为很多视觉效果非常 相像。<br>单独的分层界面从完全平面设计转变过来需要创造更多的三维空间和明暗度。 本质上来说，设计师们在扁平化设计上已经带回了一些经验，但有所不同的是，他 们利用这些技术来提高可用性，而不是单纯为了装饰。<br>分层设计的颜色最大程度上满足扁平化设计的审美，而其中最大的不同就是 Google 提供了大量的颜色选项。面板颜色是一样的——明亮、大胆以及充分的饱和 的颜色。<br>很多设计师在设计的时候选择了红色和蓝色进行设计，但似乎更多的部分喜欢 深紫色和黄色，这可能是因为这些颜色更容易搭配白色和黑色的文本。<br>接口分层在极简主义的空间里也表现的非常好，特别是在排版方面。清晰地层 级和无衬线的字体是首选。Google 建议使用 Roboto 为主要字体，它有很多选择， 从常规到粗体到斜体。<br>这样的多样化帮助用户在原理上进行导向。按照极简主义，只要你按照适当的 模型和比例，一种字体几乎可以做到所有的事情。<br>现在你已经很难找到一个网站没有全屏的图像以及进一步生动的使用分层接口 的。<br>比如这个 Field Trip 的 app，如上文所述，使照片最大化的发挥价值，表示 Material Design 不仅仅是使用颜色、照片和视觉冲击效果——他们都是设计的一 个组成部分。<br>最后，就像我们之前讨论的那样，分层接口最终表现为卡片的形式。透过实例 我们可以看到，几乎所有的设计都包含了类似于卡片的设计，从小卡片到全屏幕选 项，这些趋势携手并进。</p>\n<p>谁是下一个?</p>\n<p>Google 在 7 月发布了几个新的指导方针，Material Design Lite，由此，所有 设计人员都可以使他们的网站或者应用程序看起来像 Android 程序。<br>就像《Mobile Design Trends 2015 &amp; 2016》一书中建议的那样，我们可能会<br>越来越多的看到 Android 的特点，可能甚至会在 ios 应用和别的地方。Material Design 看起来非常的不错，而且他在很多地方表现的非常好。设计者将会利用 lite 版本提供的完美指导水平。<br>Material Design Lite 也是一种很好的工具,可以让设计人员和开发人员想要 创建一个统一的应用体验整个 Android 和 iOS 平台时使用，让应用看起来和使用起 来有一致的用户体验，哪怕在不同的设备上面。<br>图层一定会停留一段时间，但是整体可能看起来会是更分层以及更少的材料。 所以那种设计会间与 Material Design Lite 和 ios 的设计标准之间。<br>ios 的应用 Weather Channel 已经使用了这种方法。整个应用基于卡片、色彩 和图像，在卡片的使用、图像的几何形状方面等方面理论是重叠的。因为缺乏深度 和模仿导致整个 app 看起来更加可以修改。<br>渐变和单色的图层也在以另一种方式增长着。Monochromatic color palettes 是一个经典的设计技术，它使得创建的元素几乎可以适用于任何类型的内容。<br>ios 应用 Elevate 使用了一个渐变的背景在它的设计上，它的动画和运动形态 非常符合 Material Design 的标准，当然，使用渐变色不是。这个简单的亮点使得 使得设计开始打破传统的规则而不影响其原有的功能。<br>设计师们会在更深的颜色和色调方面继续发扬分层接口和 Material Design。 现在多数的 app 都采用了浅色和白色的设计风格，但更多的深色风格即将出现。<br>Weather TimeLiness 就是一个很好的例子。简单的改变颜色就足以使这款应用 脱颖而出。它分层的风格非常明显，但深色界面使得它看起来简洁而又优雅。整个 设计看起来更饱和、缓和和具有深色的审美。<br>顺便说一句。今天这样的分层接口设计仍然只是一个开始，作为设计师成长的 一部分，简单的视觉风格和高可用性的设计风格仍然会继续出现，不仅仅是在 Android 上，而是会引领整个潮流。更有趣的是，分层界面的外观本身就是一个可 扩展的设计技术，在未来几年，包括极简主义和平面设计主义在内的设计风格将会 变得越来越流行。<br>在某种程度上，这种设计风格可能会撼动那些拟物化的设计风格很多，但那些 事情发生之前，这个概念似乎已经完全站稳了脚跟，变得真实。</p>\n"},{"title":"2016年终总结","date":"2016-12-31T07:46:02.000Z","_content":"呀，2016年的最后一天上班还有两个小时就结束了，然后就是回去女朋友身边跨年了～～讲真有点迫不及待了==\n好吧，总结一下2016吧。\n2016的一月到三月，在无锡，NIIT。\n非常不要命的一段时间，以前我觉得自己可能真的没有学开发的天赋，过年来之前代码写的一塌糊涂，真的一塌糊涂，尴尬\n不过年后开始了项目阶段，做一个商城应用，不知道怎么，怎么说呢，就像一下子开窍了，自己突然就好像学会了开发，虽然基础知识还是不足，但是可以查啊，查了记住就好了。虽然写的都是垃圾代码，但我终于能熟练的开发一款应用了。所以真的，开发不是靠什么记笔记，就是靠实战，实战，实战。因为当你需要的时候，真的会去查，而且不达目的不罢休，所以当我做毕业设计《[小白](https://github.com/ZhuYilin10/XiaoBai)》的时候，真的很顺心。年后到找工作前的那段时间，真的很疯狂，每天会写到十二点，一点的代码，完成了大大小小三个应用，自己去理解，去研究。\n接下来就是心累的求职阶段了。\n\n真的很惨，虽然四次面试拿到三个offer，但是真的只有四次面试，而我投了无数封简历。在出发去上海前的一周，没有电话，没有电话，陷入了无比的绝望，互联网寒冬，没有工作经验的开发人员，还是移动应用开发人员根本无人青睐，都快怀疑自己为什么要学 Android 开发了，但我喜欢啊。\n不过还好，碰上了我现在的公司。\n讲真，领导是个很有趣的人，面试的时候一开始完全跟不上领导的节奏，领导语序快思维快，让我经历了一场头脑风暴，面试前半部分表现的很差，领导合上了电脑似乎没什么兴趣，我也是抱着面不上的心喊住了领导开始放松聊天，聊技术聊科技聊手机结果意外地聊的非常开心，领导说他不关心我现在技术怎么样，反正刚毕业都有限的很，只要喜欢开发愿意学就可以。当时还在想我技术还行啊。。。。。\n于是我发现这是一个误会，我的技术真的不还行。。。。。\n进公司的时候，给我配了一台 MacBook Pro，讲真，第一次用 Mac，虽然玩过黑苹果但是真的用来开发我就一脸蒙蔽了，环境都配不来。。。。。。。。。。。。。。。。。。。。。。。。。。好吧现在用的还算舒服，有空可以总结一下Mac的基本使用，反正在同事的帮助下装好了环境，可以写代码了，我们用的是敏捷开发，这也是第一次接触。当时习惯了本地增删改查的代码，公司封装的很深的代码让我连服务器请求数据都不会，然后领导就带着我重构代码，几乎就是重写，后来遇到了与JS交互，我写了整整一个月，搞不清楚数据结构，搞不清楚一切，看得出来公司同事对我的失望。。。。。。。。。那段时间真的都快得抑郁症了，跟同事也不熟悉，经常一天不说话。。。。\n不过一切都会好的，代码写多了发现自己Java水平进步了很多，然后遇到了开发生涯的两件大事，一个是 Material Design 的改版，一个是 Kotlin 语言的使用。这两件事对我来说非常重要，真的很重要，第一件事情让一直崇尚 Material Design 风格的我真正能够系统性的学习 Material Design 的使用，有设计图，由设计规范，有一个喜欢吹毛求疵的领导，我踩了很多坑，但是也真的学会了很多关于MD的内容，MD是一种非常简洁优雅的设计，相信我，一定会成为主流。再然后就是 Kotlin 语言的使用。讲真，整个项目使用纯 Kotlin 的项目不知道有哪些，但是我觉得一定不多，我们就是其中之一。用惯了 Java 这样的语言（非常垃圾的Java）真心觉得 Kotlin 非常伟大，它的高级函数和它的扩展性简直让人着迷，加上他与其他语言语法上的相近让我更是在以后自学JS、Swift的时候感觉到轻松。\n当然在上海我最好的兄弟[ZZR](http://www.zhangzirui.com/)在技术上也是在不断进步，没有和他的不断争论和探讨我可能也不会开始前端的学习，也不会去追求那么多新的东西。\n————————————————————————————————————————————————————————分割线———————————————————————————————————————————————————————————————————————\n好了上面是代码层面的东西，说的乱七八糟，我也不知道说了啥，好了说说新的一年。\n首先最重要的事情是，我妈开了金口，让我春节期间把女朋友带回家！！！好吧，我也到了见父母的时候了，女朋友是我成为一个程序员前后最重要的人，我们有过争吵，有过矛盾，但是我们更多的是相互的谅解，我希望也会努力，最大的努力让这段感情能走到最后，最后让她为我穿上婚纱。。。。。。好了扯远了，不过明年怎么样我真的还不知道，因为想要结婚可能一个很大的问题就是买房，上海的房价真的吃不消，苏州可能是一个选择。\n但是技术永远是美好的。\n世界上所有的坚持，都是因为热爱。\n","source":"_posts/about-my-career-2016.md","raw":"---\ntitle: 2016年终总结\ndate: 2016-12-31 15:46:02\ntags: Career\n---\n呀，2016年的最后一天上班还有两个小时就结束了，然后就是回去女朋友身边跨年了～～讲真有点迫不及待了==\n好吧，总结一下2016吧。\n2016的一月到三月，在无锡，NIIT。\n非常不要命的一段时间，以前我觉得自己可能真的没有学开发的天赋，过年来之前代码写的一塌糊涂，真的一塌糊涂，尴尬\n不过年后开始了项目阶段，做一个商城应用，不知道怎么，怎么说呢，就像一下子开窍了，自己突然就好像学会了开发，虽然基础知识还是不足，但是可以查啊，查了记住就好了。虽然写的都是垃圾代码，但我终于能熟练的开发一款应用了。所以真的，开发不是靠什么记笔记，就是靠实战，实战，实战。因为当你需要的时候，真的会去查，而且不达目的不罢休，所以当我做毕业设计《[小白](https://github.com/ZhuYilin10/XiaoBai)》的时候，真的很顺心。年后到找工作前的那段时间，真的很疯狂，每天会写到十二点，一点的代码，完成了大大小小三个应用，自己去理解，去研究。\n接下来就是心累的求职阶段了。\n\n真的很惨，虽然四次面试拿到三个offer，但是真的只有四次面试，而我投了无数封简历。在出发去上海前的一周，没有电话，没有电话，陷入了无比的绝望，互联网寒冬，没有工作经验的开发人员，还是移动应用开发人员根本无人青睐，都快怀疑自己为什么要学 Android 开发了，但我喜欢啊。\n不过还好，碰上了我现在的公司。\n讲真，领导是个很有趣的人，面试的时候一开始完全跟不上领导的节奏，领导语序快思维快，让我经历了一场头脑风暴，面试前半部分表现的很差，领导合上了电脑似乎没什么兴趣，我也是抱着面不上的心喊住了领导开始放松聊天，聊技术聊科技聊手机结果意外地聊的非常开心，领导说他不关心我现在技术怎么样，反正刚毕业都有限的很，只要喜欢开发愿意学就可以。当时还在想我技术还行啊。。。。。\n于是我发现这是一个误会，我的技术真的不还行。。。。。\n进公司的时候，给我配了一台 MacBook Pro，讲真，第一次用 Mac，虽然玩过黑苹果但是真的用来开发我就一脸蒙蔽了，环境都配不来。。。。。。。。。。。。。。。。。。。。。。。。。。好吧现在用的还算舒服，有空可以总结一下Mac的基本使用，反正在同事的帮助下装好了环境，可以写代码了，我们用的是敏捷开发，这也是第一次接触。当时习惯了本地增删改查的代码，公司封装的很深的代码让我连服务器请求数据都不会，然后领导就带着我重构代码，几乎就是重写，后来遇到了与JS交互，我写了整整一个月，搞不清楚数据结构，搞不清楚一切，看得出来公司同事对我的失望。。。。。。。。。那段时间真的都快得抑郁症了，跟同事也不熟悉，经常一天不说话。。。。\n不过一切都会好的，代码写多了发现自己Java水平进步了很多，然后遇到了开发生涯的两件大事，一个是 Material Design 的改版，一个是 Kotlin 语言的使用。这两件事对我来说非常重要，真的很重要，第一件事情让一直崇尚 Material Design 风格的我真正能够系统性的学习 Material Design 的使用，有设计图，由设计规范，有一个喜欢吹毛求疵的领导，我踩了很多坑，但是也真的学会了很多关于MD的内容，MD是一种非常简洁优雅的设计，相信我，一定会成为主流。再然后就是 Kotlin 语言的使用。讲真，整个项目使用纯 Kotlin 的项目不知道有哪些，但是我觉得一定不多，我们就是其中之一。用惯了 Java 这样的语言（非常垃圾的Java）真心觉得 Kotlin 非常伟大，它的高级函数和它的扩展性简直让人着迷，加上他与其他语言语法上的相近让我更是在以后自学JS、Swift的时候感觉到轻松。\n当然在上海我最好的兄弟[ZZR](http://www.zhangzirui.com/)在技术上也是在不断进步，没有和他的不断争论和探讨我可能也不会开始前端的学习，也不会去追求那么多新的东西。\n————————————————————————————————————————————————————————分割线———————————————————————————————————————————————————————————————————————\n好了上面是代码层面的东西，说的乱七八糟，我也不知道说了啥，好了说说新的一年。\n首先最重要的事情是，我妈开了金口，让我春节期间把女朋友带回家！！！好吧，我也到了见父母的时候了，女朋友是我成为一个程序员前后最重要的人，我们有过争吵，有过矛盾，但是我们更多的是相互的谅解，我希望也会努力，最大的努力让这段感情能走到最后，最后让她为我穿上婚纱。。。。。。好了扯远了，不过明年怎么样我真的还不知道，因为想要结婚可能一个很大的问题就是买房，上海的房价真的吃不消，苏州可能是一个选择。\n但是技术永远是美好的。\n世界上所有的坚持，都是因为热爱。\n","slug":"about-my-career-2016","published":1,"updated":"2018-03-19T08:18:01.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjexzddqo0005056ww4ks1nxy","content":"<p>呀，2016年的最后一天上班还有两个小时就结束了，然后就是回去女朋友身边跨年了～～讲真有点迫不及待了==<br>好吧，总结一下2016吧。<br>2016的一月到三月，在无锡，NIIT。<br>非常不要命的一段时间，以前我觉得自己可能真的没有学开发的天赋，过年来之前代码写的一塌糊涂，真的一塌糊涂，尴尬<br>不过年后开始了项目阶段，做一个商城应用，不知道怎么，怎么说呢，就像一下子开窍了，自己突然就好像学会了开发，虽然基础知识还是不足，但是可以查啊，查了记住就好了。虽然写的都是垃圾代码，但我终于能熟练的开发一款应用了。所以真的，开发不是靠什么记笔记，就是靠实战，实战，实战。因为当你需要的时候，真的会去查，而且不达目的不罢休，所以当我做毕业设计《<a href=\"https://github.com/ZhuYilin10/XiaoBai\" target=\"_blank\" rel=\"external\">小白</a>》的时候，真的很顺心。年后到找工作前的那段时间，真的很疯狂，每天会写到十二点，一点的代码，完成了大大小小三个应用，自己去理解，去研究。<br>接下来就是心累的求职阶段了。</p>\n<p>真的很惨，虽然四次面试拿到三个offer，但是真的只有四次面试，而我投了无数封简历。在出发去上海前的一周，没有电话，没有电话，陷入了无比的绝望，互联网寒冬，没有工作经验的开发人员，还是移动应用开发人员根本无人青睐，都快怀疑自己为什么要学 Android 开发了，但我喜欢啊。<br>不过还好，碰上了我现在的公司。<br>讲真，领导是个很有趣的人，面试的时候一开始完全跟不上领导的节奏，领导语序快思维快，让我经历了一场头脑风暴，面试前半部分表现的很差，领导合上了电脑似乎没什么兴趣，我也是抱着面不上的心喊住了领导开始放松聊天，聊技术聊科技聊手机结果意外地聊的非常开心，领导说他不关心我现在技术怎么样，反正刚毕业都有限的很，只要喜欢开发愿意学就可以。当时还在想我技术还行啊。。。。。<br>于是我发现这是一个误会，我的技术真的不还行。。。。。<br>进公司的时候，给我配了一台 MacBook Pro，讲真，第一次用 Mac，虽然玩过黑苹果但是真的用来开发我就一脸蒙蔽了，环境都配不来。。。。。。。。。。。。。。。。。。。。。。。。。。好吧现在用的还算舒服，有空可以总结一下Mac的基本使用，反正在同事的帮助下装好了环境，可以写代码了，我们用的是敏捷开发，这也是第一次接触。当时习惯了本地增删改查的代码，公司封装的很深的代码让我连服务器请求数据都不会，然后领导就带着我重构代码，几乎就是重写，后来遇到了与JS交互，我写了整整一个月，搞不清楚数据结构，搞不清楚一切，看得出来公司同事对我的失望。。。。。。。。。那段时间真的都快得抑郁症了，跟同事也不熟悉，经常一天不说话。。。。<br>不过一切都会好的，代码写多了发现自己Java水平进步了很多，然后遇到了开发生涯的两件大事，一个是 Material Design 的改版，一个是 Kotlin 语言的使用。这两件事对我来说非常重要，真的很重要，第一件事情让一直崇尚 Material Design 风格的我真正能够系统性的学习 Material Design 的使用，有设计图，由设计规范，有一个喜欢吹毛求疵的领导，我踩了很多坑，但是也真的学会了很多关于MD的内容，MD是一种非常简洁优雅的设计，相信我，一定会成为主流。再然后就是 Kotlin 语言的使用。讲真，整个项目使用纯 Kotlin 的项目不知道有哪些，但是我觉得一定不多，我们就是其中之一。用惯了 Java 这样的语言（非常垃圾的Java）真心觉得 Kotlin 非常伟大，它的高级函数和它的扩展性简直让人着迷，加上他与其他语言语法上的相近让我更是在以后自学JS、Swift的时候感觉到轻松。<br>当然在上海我最好的兄弟<a href=\"http://www.zhangzirui.com/\" target=\"_blank\" rel=\"external\">ZZR</a>在技术上也是在不断进步，没有和他的不断争论和探讨我可能也不会开始前端的学习，也不会去追求那么多新的东西。<br>————————————————————————————————————————————————————————分割线———————————————————————————————————————————————————————————————————————<br>好了上面是代码层面的东西，说的乱七八糟，我也不知道说了啥，好了说说新的一年。<br>首先最重要的事情是，我妈开了金口，让我春节期间把女朋友带回家！！！好吧，我也到了见父母的时候了，女朋友是我成为一个程序员前后最重要的人，我们有过争吵，有过矛盾，但是我们更多的是相互的谅解，我希望也会努力，最大的努力让这段感情能走到最后，最后让她为我穿上婚纱。。。。。。好了扯远了，不过明年怎么样我真的还不知道，因为想要结婚可能一个很大的问题就是买房，上海的房价真的吃不消，苏州可能是一个选择。<br>但是技术永远是美好的。<br>世界上所有的坚持，都是因为热爱。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>呀，2016年的最后一天上班还有两个小时就结束了，然后就是回去女朋友身边跨年了～～讲真有点迫不及待了==<br>好吧，总结一下2016吧。<br>2016的一月到三月，在无锡，NIIT。<br>非常不要命的一段时间，以前我觉得自己可能真的没有学开发的天赋，过年来之前代码写的一塌糊涂，真的一塌糊涂，尴尬<br>不过年后开始了项目阶段，做一个商城应用，不知道怎么，怎么说呢，就像一下子开窍了，自己突然就好像学会了开发，虽然基础知识还是不足，但是可以查啊，查了记住就好了。虽然写的都是垃圾代码，但我终于能熟练的开发一款应用了。所以真的，开发不是靠什么记笔记，就是靠实战，实战，实战。因为当你需要的时候，真的会去查，而且不达目的不罢休，所以当我做毕业设计《<a href=\"https://github.com/ZhuYilin10/XiaoBai\" target=\"_blank\" rel=\"external\">小白</a>》的时候，真的很顺心。年后到找工作前的那段时间，真的很疯狂，每天会写到十二点，一点的代码，完成了大大小小三个应用，自己去理解，去研究。<br>接下来就是心累的求职阶段了。</p>\n<p>真的很惨，虽然四次面试拿到三个offer，但是真的只有四次面试，而我投了无数封简历。在出发去上海前的一周，没有电话，没有电话，陷入了无比的绝望，互联网寒冬，没有工作经验的开发人员，还是移动应用开发人员根本无人青睐，都快怀疑自己为什么要学 Android 开发了，但我喜欢啊。<br>不过还好，碰上了我现在的公司。<br>讲真，领导是个很有趣的人，面试的时候一开始完全跟不上领导的节奏，领导语序快思维快，让我经历了一场头脑风暴，面试前半部分表现的很差，领导合上了电脑似乎没什么兴趣，我也是抱着面不上的心喊住了领导开始放松聊天，聊技术聊科技聊手机结果意外地聊的非常开心，领导说他不关心我现在技术怎么样，反正刚毕业都有限的很，只要喜欢开发愿意学就可以。当时还在想我技术还行啊。。。。。<br>于是我发现这是一个误会，我的技术真的不还行。。。。。<br>进公司的时候，给我配了一台 MacBook Pro，讲真，第一次用 Mac，虽然玩过黑苹果但是真的用来开发我就一脸蒙蔽了，环境都配不来。。。。。。。。。。。。。。。。。。。。。。。。。。好吧现在用的还算舒服，有空可以总结一下Mac的基本使用，反正在同事的帮助下装好了环境，可以写代码了，我们用的是敏捷开发，这也是第一次接触。当时习惯了本地增删改查的代码，公司封装的很深的代码让我连服务器请求数据都不会，然后领导就带着我重构代码，几乎就是重写，后来遇到了与JS交互，我写了整整一个月，搞不清楚数据结构，搞不清楚一切，看得出来公司同事对我的失望。。。。。。。。。那段时间真的都快得抑郁症了，跟同事也不熟悉，经常一天不说话。。。。<br>不过一切都会好的，代码写多了发现自己Java水平进步了很多，然后遇到了开发生涯的两件大事，一个是 Material Design 的改版，一个是 Kotlin 语言的使用。这两件事对我来说非常重要，真的很重要，第一件事情让一直崇尚 Material Design 风格的我真正能够系统性的学习 Material Design 的使用，有设计图，由设计规范，有一个喜欢吹毛求疵的领导，我踩了很多坑，但是也真的学会了很多关于MD的内容，MD是一种非常简洁优雅的设计，相信我，一定会成为主流。再然后就是 Kotlin 语言的使用。讲真，整个项目使用纯 Kotlin 的项目不知道有哪些，但是我觉得一定不多，我们就是其中之一。用惯了 Java 这样的语言（非常垃圾的Java）真心觉得 Kotlin 非常伟大，它的高级函数和它的扩展性简直让人着迷，加上他与其他语言语法上的相近让我更是在以后自学JS、Swift的时候感觉到轻松。<br>当然在上海我最好的兄弟<a href=\"http://www.zhangzirui.com/\" target=\"_blank\" rel=\"external\">ZZR</a>在技术上也是在不断进步，没有和他的不断争论和探讨我可能也不会开始前端的学习，也不会去追求那么多新的东西。<br>————————————————————————————————————————————————————————分割线———————————————————————————————————————————————————————————————————————<br>好了上面是代码层面的东西，说的乱七八糟，我也不知道说了啥，好了说说新的一年。<br>首先最重要的事情是，我妈开了金口，让我春节期间把女朋友带回家！！！好吧，我也到了见父母的时候了，女朋友是我成为一个程序员前后最重要的人，我们有过争吵，有过矛盾，但是我们更多的是相互的谅解，我希望也会努力，最大的努力让这段感情能走到最后，最后让她为我穿上婚纱。。。。。。好了扯远了，不过明年怎么样我真的还不知道，因为想要结婚可能一个很大的问题就是买房，上海的房价真的吃不消，苏州可能是一个选择。<br>但是技术永远是美好的。<br>世界上所有的坚持，都是因为热爱。</p>\n"},{"title":"Material Design 学习笔记 2","date":"2016-12-15T07:41:14.000Z","_content":"好久没更新Blog了，当初说想保持常更新来记录自己在开发道路上的事情，结果也是没做到，作为一个有女朋友爱看电视爱写代码的开发人员来说，每天的时间都花在了陪女朋友、看电视剧和写代码上，好吧我知道开发人员怎么能有女朋友呢。。。但我就是有，而且在我眼中是非常可爱漂亮我很爱她（捂脸）～～～\n好了以上依旧是废话。==\n前几天在北京举办的的Google开发者大会（Google Develop Day），官方宣布了Google Developers中国网站发布，怀着激动的心情关掉了代理，登录了developer.android.google.cn。快的令人感动，404世界什么时候回来还不知道，但是，至少我们看到了希望。\n继续说说Material Design。\n首先要说的就是Toolbar。这是一个标准的Material Design组件，在Android应用中，被大量使用。在Android 3.0时Android推出了ActionBar，ActionBar 过去最多人使用的两大套件就是 ActionBarSherlock 以及官方提供在 support library v7 里的 AppCompat。而Toolbar的推出，很大程度就是用来取代ActionBar的。\n\n当我们的Activity继承自AppCompat的时候，会默认看到ActionBar，为了使用全新的Toolbar或者其他布局我们可以选择在Style中，对Theme进行设置，将AppTheme 的parent设置为Theme.AppCompat.Light.NoActionBar。这样我们可以看到一个没有ActionBar的空白Activity。然后我们就可以在XML文件中放进Toolbar组件。\n当然我们会注意到一个问题，就是toolbar的阴影。我们知道在Material Design中由于材料的层次高度会像自然界中一样存在着阴影，具体可以参考知乎和Bilibili等非常符合设计规范的APP。但是如何给toolbar增加阴影，Google后发现一般给出的答案是在toolbar下加一层阴影图片，一个view。。。。但后来我发现了一个组件叫做AppbarLayout。\nAppBarLayout 是继承LinerLayout实现的一个ViewGroup容器组件，它是为了Material Design设计的App Bar，支持手势滑动操作。当我们将AppbarLayout和Toolbar配合使用的时候，就会得到我们想要的阴影效果。\n```XML\n<android.support.design.widget.AppBarLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\">\n        <android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"?attr/colorPrimary\"\n            android:minHeight=\"56dp\"\n            app:titleTextColor=\"@color/white\">\n        </android.support.v7.widget.Toolbar>\n</android.support.design.widget.AppBarLayout>\n```\n而这个时候我们发现，我们无法设置Toolbar的文字颜色。我们可以使用设置主题的方式来设置。\n```XML\n<style name=\"CC.ToolbarWhiteTheme\" parent=\"Widget.Design.CollapsingToolbar\">\n        <item name=\"android:textColorSecondary\">@color/white</item>\n</style>\n```\n我们可以自定义Toolbar的布局。以知乎中的一个界面为例。\n知乎的一个界面\n我们可以看到知乎的Toolbar从左至右依次是title、share 的 icon和三个小圆点。\n话说那些用惯iOS程序的人看到有些Android特色的设计几乎都是一脸懵逼。。。。。包括公司的iOS开发，我在投屏演示功能的时候他们几乎都不能理解toolbar里的三个小圆点、FloatingActionBar和下拉刷新时候不动的界面但是出现的小圈。。。。他们觉得好蠢但我是发自内心的觉得比iOS的风格好看好吗。。。。。果粉勿喷。\ntitle的使用很简单，因为toolbar本身就带那么一个属性，我们可以直接设置toolbar.setTitle = “……”来实现。分享按钮同样简单，即在布局中加入这个icon并添加点击事件，一般有baseactivity的可以在里面抽一个函数出来方便之后使用。\n关于三个点，我们可以在res中建立一个package叫做menu，与layout、style等平级，然后实现父类的onCreateOptionsMenu函数，并将menu映射进去。\n代码如下：\n```Java\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\n  menuInflater.inflate(R.menu.aaaaaa, menu)\n  return super.onCreateOptionsMenu(menu)\n}\n```\n顺便说一句，我用的是Kotlin，我们公司可能是比较早将Android项目全部使用Kotlin的公司了，Kotlin的本质与Java类似，但是语法上很多高级函数和他的扩展性让人欲罢不能，有坑，等有空可以总结一下。\n今天大概写到这里，我想去陪女朋友了，这几天有事请假没有上班，刚好可以陪自己的女朋友，我一个人在上海工作，日常不在她身边，真的辛苦她了。代码重要，女朋友更重要。\n","source":"_posts/about-material-design-2.md","raw":"---\ntitle: Material Design 学习笔记 2\ndate: 2016-12-15 15:41:14\ntags: Android\n---\n好久没更新Blog了，当初说想保持常更新来记录自己在开发道路上的事情，结果也是没做到，作为一个有女朋友爱看电视爱写代码的开发人员来说，每天的时间都花在了陪女朋友、看电视剧和写代码上，好吧我知道开发人员怎么能有女朋友呢。。。但我就是有，而且在我眼中是非常可爱漂亮我很爱她（捂脸）～～～\n好了以上依旧是废话。==\n前几天在北京举办的的Google开发者大会（Google Develop Day），官方宣布了Google Developers中国网站发布，怀着激动的心情关掉了代理，登录了developer.android.google.cn。快的令人感动，404世界什么时候回来还不知道，但是，至少我们看到了希望。\n继续说说Material Design。\n首先要说的就是Toolbar。这是一个标准的Material Design组件，在Android应用中，被大量使用。在Android 3.0时Android推出了ActionBar，ActionBar 过去最多人使用的两大套件就是 ActionBarSherlock 以及官方提供在 support library v7 里的 AppCompat。而Toolbar的推出，很大程度就是用来取代ActionBar的。\n\n当我们的Activity继承自AppCompat的时候，会默认看到ActionBar，为了使用全新的Toolbar或者其他布局我们可以选择在Style中，对Theme进行设置，将AppTheme 的parent设置为Theme.AppCompat.Light.NoActionBar。这样我们可以看到一个没有ActionBar的空白Activity。然后我们就可以在XML文件中放进Toolbar组件。\n当然我们会注意到一个问题，就是toolbar的阴影。我们知道在Material Design中由于材料的层次高度会像自然界中一样存在着阴影，具体可以参考知乎和Bilibili等非常符合设计规范的APP。但是如何给toolbar增加阴影，Google后发现一般给出的答案是在toolbar下加一层阴影图片，一个view。。。。但后来我发现了一个组件叫做AppbarLayout。\nAppBarLayout 是继承LinerLayout实现的一个ViewGroup容器组件，它是为了Material Design设计的App Bar，支持手势滑动操作。当我们将AppbarLayout和Toolbar配合使用的时候，就会得到我们想要的阴影效果。\n```XML\n<android.support.design.widget.AppBarLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\">\n        <android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"?attr/colorPrimary\"\n            android:minHeight=\"56dp\"\n            app:titleTextColor=\"@color/white\">\n        </android.support.v7.widget.Toolbar>\n</android.support.design.widget.AppBarLayout>\n```\n而这个时候我们发现，我们无法设置Toolbar的文字颜色。我们可以使用设置主题的方式来设置。\n```XML\n<style name=\"CC.ToolbarWhiteTheme\" parent=\"Widget.Design.CollapsingToolbar\">\n        <item name=\"android:textColorSecondary\">@color/white</item>\n</style>\n```\n我们可以自定义Toolbar的布局。以知乎中的一个界面为例。\n知乎的一个界面\n我们可以看到知乎的Toolbar从左至右依次是title、share 的 icon和三个小圆点。\n话说那些用惯iOS程序的人看到有些Android特色的设计几乎都是一脸懵逼。。。。。包括公司的iOS开发，我在投屏演示功能的时候他们几乎都不能理解toolbar里的三个小圆点、FloatingActionBar和下拉刷新时候不动的界面但是出现的小圈。。。。他们觉得好蠢但我是发自内心的觉得比iOS的风格好看好吗。。。。。果粉勿喷。\ntitle的使用很简单，因为toolbar本身就带那么一个属性，我们可以直接设置toolbar.setTitle = “……”来实现。分享按钮同样简单，即在布局中加入这个icon并添加点击事件，一般有baseactivity的可以在里面抽一个函数出来方便之后使用。\n关于三个点，我们可以在res中建立一个package叫做menu，与layout、style等平级，然后实现父类的onCreateOptionsMenu函数，并将menu映射进去。\n代码如下：\n```Java\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\n  menuInflater.inflate(R.menu.aaaaaa, menu)\n  return super.onCreateOptionsMenu(menu)\n}\n```\n顺便说一句，我用的是Kotlin，我们公司可能是比较早将Android项目全部使用Kotlin的公司了，Kotlin的本质与Java类似，但是语法上很多高级函数和他的扩展性让人欲罢不能，有坑，等有空可以总结一下。\n今天大概写到这里，我想去陪女朋友了，这几天有事请假没有上班，刚好可以陪自己的女朋友，我一个人在上海工作，日常不在她身边，真的辛苦她了。代码重要，女朋友更重要。\n","slug":"about-material-design-2","published":1,"updated":"2018-03-19T08:18:01.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjexzddqp0006056w7raa77eu","content":"<p>好久没更新Blog了，当初说想保持常更新来记录自己在开发道路上的事情，结果也是没做到，作为一个有女朋友爱看电视爱写代码的开发人员来说，每天的时间都花在了陪女朋友、看电视剧和写代码上，好吧我知道开发人员怎么能有女朋友呢。。。但我就是有，而且在我眼中是非常可爱漂亮我很爱她（捂脸）～～～<br>好了以上依旧是废话。==<br>前几天在北京举办的的Google开发者大会（Google Develop Day），官方宣布了Google Developers中国网站发布，怀着激动的心情关掉了代理，登录了developer.android.google.cn。快的令人感动，404世界什么时候回来还不知道，但是，至少我们看到了希望。<br>继续说说Material Design。<br>首先要说的就是Toolbar。这是一个标准的Material Design组件，在Android应用中，被大量使用。在Android 3.0时Android推出了ActionBar，ActionBar 过去最多人使用的两大套件就是 ActionBarSherlock 以及官方提供在 support library v7 里的 AppCompat。而Toolbar的推出，很大程度就是用来取代ActionBar的。</p>\n<p>当我们的Activity继承自AppCompat的时候，会默认看到ActionBar，为了使用全新的Toolbar或者其他布局我们可以选择在Style中，对Theme进行设置，将AppTheme 的parent设置为Theme.AppCompat.Light.NoActionBar。这样我们可以看到一个没有ActionBar的空白Activity。然后我们就可以在XML文件中放进Toolbar组件。<br>当然我们会注意到一个问题，就是toolbar的阴影。我们知道在Material Design中由于材料的层次高度会像自然界中一样存在着阴影，具体可以参考知乎和Bilibili等非常符合设计规范的APP。但是如何给toolbar增加阴影，Google后发现一般给出的答案是在toolbar下加一层阴影图片，一个view。。。。但后来我发现了一个组件叫做AppbarLayout。<br>AppBarLayout 是继承LinerLayout实现的一个ViewGroup容器组件，它是为了Material Design设计的App Bar，支持手势滑动操作。当我们将AppbarLayout和Toolbar配合使用的时候，就会得到我们想要的阴影效果。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">            <span class=\"attr\">android:minHeight</span>=<span class=\"string\">\"56dp\"</span></div><div class=\"line\">            <span class=\"attr\">app:titleTextColor</span>=<span class=\"string\">\"@color/white\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>而这个时候我们发现，我们无法设置Toolbar的文字颜色。我们可以使用设置主题的方式来设置。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CC.ToolbarWhiteTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Widget.Design.CollapsingToolbar\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:textColorSecondary\"</span>&gt;</span>@color/white<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>我们可以自定义Toolbar的布局。以知乎中的一个界面为例。<br>知乎的一个界面<br>我们可以看到知乎的Toolbar从左至右依次是title、share 的 icon和三个小圆点。<br>话说那些用惯iOS程序的人看到有些Android特色的设计几乎都是一脸懵逼。。。。。包括公司的iOS开发，我在投屏演示功能的时候他们几乎都不能理解toolbar里的三个小圆点、FloatingActionBar和下拉刷新时候不动的界面但是出现的小圈。。。。他们觉得好蠢但我是发自内心的觉得比iOS的风格好看好吗。。。。。果粉勿喷。<br>title的使用很简单，因为toolbar本身就带那么一个属性，我们可以直接设置toolbar.setTitle = “……”来实现。分享按钮同样简单，即在布局中加入这个icon并添加点击事件，一般有baseactivity的可以在里面抽一个函数出来方便之后使用。<br>关于三个点，我们可以在res中建立一个package叫做menu，与layout、style等平级，然后实现父类的onCreateOptionsMenu函数，并将menu映射进去。<br>代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">override fun <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(menu: Menu)</span>: Boolean </span>&#123;</div><div class=\"line\">  menuInflater.inflate(R.menu.aaaaaa, menu)</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onCreateOptionsMenu(menu)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>顺便说一句，我用的是Kotlin，我们公司可能是比较早将Android项目全部使用Kotlin的公司了，Kotlin的本质与Java类似，但是语法上很多高级函数和他的扩展性让人欲罢不能，有坑，等有空可以总结一下。<br>今天大概写到这里，我想去陪女朋友了，这几天有事请假没有上班，刚好可以陪自己的女朋友，我一个人在上海工作，日常不在她身边，真的辛苦她了。代码重要，女朋友更重要。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>好久没更新Blog了，当初说想保持常更新来记录自己在开发道路上的事情，结果也是没做到，作为一个有女朋友爱看电视爱写代码的开发人员来说，每天的时间都花在了陪女朋友、看电视剧和写代码上，好吧我知道开发人员怎么能有女朋友呢。。。但我就是有，而且在我眼中是非常可爱漂亮我很爱她（捂脸）～～～<br>好了以上依旧是废话。==<br>前几天在北京举办的的Google开发者大会（Google Develop Day），官方宣布了Google Developers中国网站发布，怀着激动的心情关掉了代理，登录了developer.android.google.cn。快的令人感动，404世界什么时候回来还不知道，但是，至少我们看到了希望。<br>继续说说Material Design。<br>首先要说的就是Toolbar。这是一个标准的Material Design组件，在Android应用中，被大量使用。在Android 3.0时Android推出了ActionBar，ActionBar 过去最多人使用的两大套件就是 ActionBarSherlock 以及官方提供在 support library v7 里的 AppCompat。而Toolbar的推出，很大程度就是用来取代ActionBar的。</p>\n<p>当我们的Activity继承自AppCompat的时候，会默认看到ActionBar，为了使用全新的Toolbar或者其他布局我们可以选择在Style中，对Theme进行设置，将AppTheme 的parent设置为Theme.AppCompat.Light.NoActionBar。这样我们可以看到一个没有ActionBar的空白Activity。然后我们就可以在XML文件中放进Toolbar组件。<br>当然我们会注意到一个问题，就是toolbar的阴影。我们知道在Material Design中由于材料的层次高度会像自然界中一样存在着阴影，具体可以参考知乎和Bilibili等非常符合设计规范的APP。但是如何给toolbar增加阴影，Google后发现一般给出的答案是在toolbar下加一层阴影图片，一个view。。。。但后来我发现了一个组件叫做AppbarLayout。<br>AppBarLayout 是继承LinerLayout实现的一个ViewGroup容器组件，它是为了Material Design设计的App Bar，支持手势滑动操作。当我们将AppbarLayout和Toolbar配合使用的时候，就会得到我们想要的阴影效果。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">            <span class=\"attr\">android:minHeight</span>=<span class=\"string\">\"56dp\"</span></div><div class=\"line\">            <span class=\"attr\">app:titleTextColor</span>=<span class=\"string\">\"@color/white\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>而这个时候我们发现，我们无法设置Toolbar的文字颜色。我们可以使用设置主题的方式来设置。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CC.ToolbarWhiteTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Widget.Design.CollapsingToolbar\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:textColorSecondary\"</span>&gt;</span>@color/white<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>我们可以自定义Toolbar的布局。以知乎中的一个界面为例。<br>知乎的一个界面<br>我们可以看到知乎的Toolbar从左至右依次是title、share 的 icon和三个小圆点。<br>话说那些用惯iOS程序的人看到有些Android特色的设计几乎都是一脸懵逼。。。。。包括公司的iOS开发，我在投屏演示功能的时候他们几乎都不能理解toolbar里的三个小圆点、FloatingActionBar和下拉刷新时候不动的界面但是出现的小圈。。。。他们觉得好蠢但我是发自内心的觉得比iOS的风格好看好吗。。。。。果粉勿喷。<br>title的使用很简单，因为toolbar本身就带那么一个属性，我们可以直接设置toolbar.setTitle = “……”来实现。分享按钮同样简单，即在布局中加入这个icon并添加点击事件，一般有baseactivity的可以在里面抽一个函数出来方便之后使用。<br>关于三个点，我们可以在res中建立一个package叫做menu，与layout、style等平级，然后实现父类的onCreateOptionsMenu函数，并将menu映射进去。<br>代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">override fun <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(menu: Menu)</span>: Boolean </span>&#123;</div><div class=\"line\">  menuInflater.inflate(R.menu.aaaaaa, menu)</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onCreateOptionsMenu(menu)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>顺便说一句，我用的是Kotlin，我们公司可能是比较早将Android项目全部使用Kotlin的公司了，Kotlin的本质与Java类似，但是语法上很多高级函数和他的扩展性让人欲罢不能，有坑，等有空可以总结一下。<br>今天大概写到这里，我想去陪女朋友了，这几天有事请假没有上班，刚好可以陪自己的女朋友，我一个人在上海工作，日常不在她身边，真的辛苦她了。代码重要，女朋友更重要。</p>\n"},{"title":"几天前写的比较","date":"2016-11-06T07:23:39.000Z","_content":"## 需求分析\n最近做了一个学生成绩排序的功能，我们的需求是首先按照学生作业是否完成排序，然后按照学生成绩高低排序，最后按照学生的名字进行排序，并且可以使用 Spinner 进行来回选择，让老师可以自由对学生进行排序。\n\n## 我的做法\n在 Java 中对于集合或者数组不是单纯的数字时，一般可以选择使用 Collections.sort 或者 Arrays.sort 函数来对对象进行排序。\nCollections.sort 函数的用法是将一个 Comparator 对象传入。\n首先是自定义 Comparator 对象，一般是方法有两种，通常可以使用Comparator或Comparable，在这里我选择了实现 Comparator 接口来完成排序。如下是一个学生分数升序的写法。\n\n```java\ninner class SortByPaperScopeAsc : Comparator<Student> {\n    override fun compare(w1: Student, w2: Student): Int {\n        val v1 = h1?.score ?: \"-1\"\n        val v2 = h2?.score ?: \"-1\"\n        return v2.compareTo(v1)\n    }\n}\n```\n但这里仅仅是满足一项需求，而不能做到满足多种条件排序。如我们再写一个需求：\n```java\ninner class SortByStatusDesc : Comparator<Student> {\n    override fun compare(h1: Student, h2: Student): Int {\n      val v1 = if (h1?.homeworkIsFinished) 1 else 0\n      val v2 = if (h2?.homeworkIsFinished) 1 else 0\n        return v2.compareTo(v1)\n    }\n}\n```\n我们需要满足已完成作业的排在前面，未完成作业的排在后面，然后对已完成作业的学生按分数升序排列。\n毫无疑问的写法是直接定义一个排序的Comparator满足这样的需求。\n```java\ninner class SortByStatusAndScore : Comparator<Student> {\n  override fun compare(w1: Student, w2: Student): Int {\n    val compare = SortByStatusDesc().compare(w1, w2)\n        if (compare == 0) {\n            val v1 = w1?.score ?: \"-1\"\n            val v2 = w2?.score ?: \"-1\"\n            return v1.compareTo(v2)\n        }\n        return compare\n  }\n}\n```\n但是这样一来当我们按多种条件排序时，这样的写法无疑会出现代码出现大量的重复，这个时候我们可以考虑对这种方法进行封装，可以把不同的排序条件进行组合。\n下面是我写的一个比较类\n```java\nclass ComposeComparator<T> : Comparator<T> {\n  val comparators: Array<out Comparator<T>>\n  constructor(vararg comparators: Comparator<T>) {\n      this.comparators = comparators\n  }\n  override fun compare(o1: T, o2: T): Int {\n      comparators.forEach {\n          val result = it.compare(o1, o2)\n          if (result != 0) {\n              return result\n          }\n      }\n      return 0\n  }\n}\n```\n使用vararg，也就是可变长参数将不同的条件依次传入，可以做到不同单一排序方法的组合使用，比如\n```java\nComposeComparator(SortByStatusDesc(), SortByScopeAsc(), SortByNameAsc()))\n```\n","source":"_posts/additional-cursor.md","raw":"---\ntitle: 几天前写的比较\ndate: 2016-11-06 15:23:39\ntags: java\n---\n## 需求分析\n最近做了一个学生成绩排序的功能，我们的需求是首先按照学生作业是否完成排序，然后按照学生成绩高低排序，最后按照学生的名字进行排序，并且可以使用 Spinner 进行来回选择，让老师可以自由对学生进行排序。\n\n## 我的做法\n在 Java 中对于集合或者数组不是单纯的数字时，一般可以选择使用 Collections.sort 或者 Arrays.sort 函数来对对象进行排序。\nCollections.sort 函数的用法是将一个 Comparator 对象传入。\n首先是自定义 Comparator 对象，一般是方法有两种，通常可以使用Comparator或Comparable，在这里我选择了实现 Comparator 接口来完成排序。如下是一个学生分数升序的写法。\n\n```java\ninner class SortByPaperScopeAsc : Comparator<Student> {\n    override fun compare(w1: Student, w2: Student): Int {\n        val v1 = h1?.score ?: \"-1\"\n        val v2 = h2?.score ?: \"-1\"\n        return v2.compareTo(v1)\n    }\n}\n```\n但这里仅仅是满足一项需求，而不能做到满足多种条件排序。如我们再写一个需求：\n```java\ninner class SortByStatusDesc : Comparator<Student> {\n    override fun compare(h1: Student, h2: Student): Int {\n      val v1 = if (h1?.homeworkIsFinished) 1 else 0\n      val v2 = if (h2?.homeworkIsFinished) 1 else 0\n        return v2.compareTo(v1)\n    }\n}\n```\n我们需要满足已完成作业的排在前面，未完成作业的排在后面，然后对已完成作业的学生按分数升序排列。\n毫无疑问的写法是直接定义一个排序的Comparator满足这样的需求。\n```java\ninner class SortByStatusAndScore : Comparator<Student> {\n  override fun compare(w1: Student, w2: Student): Int {\n    val compare = SortByStatusDesc().compare(w1, w2)\n        if (compare == 0) {\n            val v1 = w1?.score ?: \"-1\"\n            val v2 = w2?.score ?: \"-1\"\n            return v1.compareTo(v2)\n        }\n        return compare\n  }\n}\n```\n但是这样一来当我们按多种条件排序时，这样的写法无疑会出现代码出现大量的重复，这个时候我们可以考虑对这种方法进行封装，可以把不同的排序条件进行组合。\n下面是我写的一个比较类\n```java\nclass ComposeComparator<T> : Comparator<T> {\n  val comparators: Array<out Comparator<T>>\n  constructor(vararg comparators: Comparator<T>) {\n      this.comparators = comparators\n  }\n  override fun compare(o1: T, o2: T): Int {\n      comparators.forEach {\n          val result = it.compare(o1, o2)\n          if (result != 0) {\n              return result\n          }\n      }\n      return 0\n  }\n}\n```\n使用vararg，也就是可变长参数将不同的条件依次传入，可以做到不同单一排序方法的组合使用，比如\n```java\nComposeComparator(SortByStatusDesc(), SortByScopeAsc(), SortByNameAsc()))\n```\n","slug":"additional-cursor","published":1,"updated":"2018-03-19T08:18:01.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjexzddqq0009056wqwm9wawb","content":"<h2 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h2><p>最近做了一个学生成绩排序的功能，我们的需求是首先按照学生作业是否完成排序，然后按照学生成绩高低排序，最后按照学生的名字进行排序，并且可以使用 Spinner 进行来回选择，让老师可以自由对学生进行排序。</p>\n<h2 id=\"我的做法\"><a href=\"#我的做法\" class=\"headerlink\" title=\"我的做法\"></a>我的做法</h2><p>在 Java 中对于集合或者数组不是单纯的数字时，一般可以选择使用 Collections.sort 或者 Arrays.sort 函数来对对象进行排序。<br>Collections.sort 函数的用法是将一个 Comparator 对象传入。<br>首先是自定义 Comparator 对象，一般是方法有两种，通常可以使用Comparator或Comparable，在这里我选择了实现 Comparator 接口来完成排序。如下是一个学生分数升序的写法。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">inner class SortByPaperScopeAsc : Comparator&lt;Student&gt; &#123;</div><div class=\"line\">    override fun compare(w1: Student, w2: Student): Int &#123;</div><div class=\"line\">        val v1 = h1?.score ?: \"-1\"</div><div class=\"line\">        val v2 = h2?.score ?: \"-1\"</div><div class=\"line\">        return v2.compareTo(v1)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但这里仅仅是满足一项需求，而不能做到满足多种条件排序。如我们再写一个需求：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">inner class SortByStatusDesc : Comparator&lt;Student&gt; &#123;</div><div class=\"line\">    override fun compare(h1: Student, h2: Student): Int &#123;</div><div class=\"line\">      val v1 = if (h1?.homeworkIsFinished) 1 else 0</div><div class=\"line\">      val v2 = if (h2?.homeworkIsFinished) 1 else 0</div><div class=\"line\">        return v2.compareTo(v1)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们需要满足已完成作业的排在前面，未完成作业的排在后面，然后对已完成作业的学生按分数升序排列。<br>毫无疑问的写法是直接定义一个排序的Comparator满足这样的需求。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">inner class SortByStatusAndScore : Comparator&lt;Student&gt; &#123;</div><div class=\"line\">  override fun compare(w1: Student, w2: Student): Int &#123;</div><div class=\"line\">    val compare = SortByStatusDesc().compare(w1, w2)</div><div class=\"line\">        if (compare == 0) &#123;</div><div class=\"line\">            val v1 = w1?.score ?: \"-1\"</div><div class=\"line\">            val v2 = w2?.score ?: \"-1\"</div><div class=\"line\">            return v1.compareTo(v2)</div><div class=\"line\">        &#125;</div><div class=\"line\">        return compare</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>但是这样一来当我们按多种条件排序时，这样的写法无疑会出现代码出现大量的重复，这个时候我们可以考虑对这种方法进行封装，可以把不同的排序条件进行组合。<br>下面是我写的一个比较类<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ComposeComparator&lt;T&gt; : Comparator&lt;T&gt; &#123;</div><div class=\"line\">  val comparators: Array&lt;out Comparator&lt;T&gt;&gt;</div><div class=\"line\">  constructor(vararg comparators: Comparator&lt;T&gt;) &#123;</div><div class=\"line\">      this.comparators = comparators</div><div class=\"line\">  &#125;</div><div class=\"line\">  override fun compare(o1: T, o2: T): Int &#123;</div><div class=\"line\">      comparators.forEach &#123;</div><div class=\"line\">          val result = it.compare(o1, o2)</div><div class=\"line\">          if (result != 0) &#123;</div><div class=\"line\">              return result</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      return 0</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用vararg，也就是可变长参数将不同的条件依次传入，可以做到不同单一排序方法的组合使用，比如<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ComposeComparator(SortByStatusDesc(), SortByScopeAsc(), SortByNameAsc()))</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h2><p>最近做了一个学生成绩排序的功能，我们的需求是首先按照学生作业是否完成排序，然后按照学生成绩高低排序，最后按照学生的名字进行排序，并且可以使用 Spinner 进行来回选择，让老师可以自由对学生进行排序。</p>\n<h2 id=\"我的做法\"><a href=\"#我的做法\" class=\"headerlink\" title=\"我的做法\"></a>我的做法</h2><p>在 Java 中对于集合或者数组不是单纯的数字时，一般可以选择使用 Collections.sort 或者 Arrays.sort 函数来对对象进行排序。<br>Collections.sort 函数的用法是将一个 Comparator 对象传入。<br>首先是自定义 Comparator 对象，一般是方法有两种，通常可以使用Comparator或Comparable，在这里我选择了实现 Comparator 接口来完成排序。如下是一个学生分数升序的写法。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">inner class SortByPaperScopeAsc : Comparator&lt;Student&gt; &#123;</div><div class=\"line\">    override fun compare(w1: Student, w2: Student): Int &#123;</div><div class=\"line\">        val v1 = h1?.score ?: \"-1\"</div><div class=\"line\">        val v2 = h2?.score ?: \"-1\"</div><div class=\"line\">        return v2.compareTo(v1)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但这里仅仅是满足一项需求，而不能做到满足多种条件排序。如我们再写一个需求：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">inner class SortByStatusDesc : Comparator&lt;Student&gt; &#123;</div><div class=\"line\">    override fun compare(h1: Student, h2: Student): Int &#123;</div><div class=\"line\">      val v1 = if (h1?.homeworkIsFinished) 1 else 0</div><div class=\"line\">      val v2 = if (h2?.homeworkIsFinished) 1 else 0</div><div class=\"line\">        return v2.compareTo(v1)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们需要满足已完成作业的排在前面，未完成作业的排在后面，然后对已完成作业的学生按分数升序排列。<br>毫无疑问的写法是直接定义一个排序的Comparator满足这样的需求。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">inner class SortByStatusAndScore : Comparator&lt;Student&gt; &#123;</div><div class=\"line\">  override fun compare(w1: Student, w2: Student): Int &#123;</div><div class=\"line\">    val compare = SortByStatusDesc().compare(w1, w2)</div><div class=\"line\">        if (compare == 0) &#123;</div><div class=\"line\">            val v1 = w1?.score ?: \"-1\"</div><div class=\"line\">            val v2 = w2?.score ?: \"-1\"</div><div class=\"line\">            return v1.compareTo(v2)</div><div class=\"line\">        &#125;</div><div class=\"line\">        return compare</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>但是这样一来当我们按多种条件排序时，这样的写法无疑会出现代码出现大量的重复，这个时候我们可以考虑对这种方法进行封装，可以把不同的排序条件进行组合。<br>下面是我写的一个比较类<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ComposeComparator&lt;T&gt; : Comparator&lt;T&gt; &#123;</div><div class=\"line\">  val comparators: Array&lt;out Comparator&lt;T&gt;&gt;</div><div class=\"line\">  constructor(vararg comparators: Comparator&lt;T&gt;) &#123;</div><div class=\"line\">      this.comparators = comparators</div><div class=\"line\">  &#125;</div><div class=\"line\">  override fun compare(o1: T, o2: T): Int &#123;</div><div class=\"line\">      comparators.forEach &#123;</div><div class=\"line\">          val result = it.compare(o1, o2)</div><div class=\"line\">          if (result != 0) &#123;</div><div class=\"line\">              return result</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      return 0</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用vararg，也就是可变长参数将不同的条件依次传入，可以做到不同单一排序方法的组合使用，比如<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ComposeComparator(SortByStatusDesc(), SortByScopeAsc(), SortByNameAsc()))</div></pre></td></tr></table></figure></p>\n"},{"title":"Android Oreo 新特性适配 —— Adaptive Icons","date":"2017-09-12T13:13:09.000Z","_content":"美国日全食那天，一段很短的视频带来了 Android Oreo 的正式版本，怀着激动的心情拿出了我日日把玩的 Nexus 5X，升级到了正式版本。\n流畅。\n我只能这么说，虽然不至于感受到宣传中提到的提升，但流畅的操作让我非常舒服。\n可是一切感觉在看到图标后变了。\n![图标](https://user-images.githubusercontent.com/16117136/30329107-ec88fb50-9803-11e7-8964-1e51c6f62ea6.png)\n这方方的图标看的我也方方的。7.X时代圆润的圆形图标呢！\n灰溜溜刷回了Lineage OS，并在知乎上喷了一通。<a href=\"https://www.zhihu.com/question/64259646/answer/218605483\">我的回答</a>。\n可是在 Pixel 上确是华丽丽的圆形图标，好看整齐得让人心醉。\n那么同样的 icon 为什么在不同的手机上会显示不同的样子呢。\n那就是 Android 8.0 的新特性 Adaptive Icons。\n前不久刚刚为公司的产品匹配了这一特性，踩了点坑但基本上很顺畅，写下来作为笔记。\n首先第一步，绝对是先使用 Android Studio 3.0，现在的版本是 Android Studio 3.0 Beta 4。\n然后就是要将项目的 targetSdkVersion 升级至 26 的版本，当然随之要变动的就是 compileSdkVersion 的版本，系统不会允许 compileSdkVersion 版本低于 targetSdkVersion。然后就是相应 support 库的升级，跳过不谈，这些准备工作做好后开始新图标的使用。\n![步骤1](https://user-images.githubusercontent.com/16117136/30329538-1f430dd2-9805-11e7-8a7b-88ef5d1a6bd7.png)\n点击后出现了如下的页面。\n![步骤2](https://user-images.githubusercontent.com/16117136/30330043-8b79df66-9806-11e7-9859-0d9caa6d5154.png)\n这里我们就可以看到官方提供的 Android 小人的 icon 示意图，各种形态，那么 Android 是怎么做到的呢？\n我们可以看到它是由两个图层组成的，一个叫做 Foreground 前景，一个叫做 background 背景。\n前景可以是一张 .png 图片，大小为 108 * 108，具体可以参见 Google 官方文档。\n背景是一张矢量图 drawable 或者 纯色背景，这样 Android 在启动器的要求下可以选取适当的外框。\n我们使用 Android Studio 导入图标后可以看到一个叫做 mipmap-anydpi-v26 的目录，里面是一个 xml 文件，代码如下：\n```XML\n<adaptive-icon xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <background android:drawable=\"@color/ic_launcher_background\"/>\n    <foreground android:drawable=\"@mipmap/ic_launcher_foreground\"/>\n</adaptive-icon>\n```\n点进去我们再看两张前后景图片的代码：\n背景\n```XML\n<resources>\n  <color name=\"ic_launcher_background\">#FFFFFF</color>\n</resources>\n```\n前景自然就是我们叫做 ic_launcher_background 的图片了。\n当然这个时候的项目里还有 ic_launcher，这个是在不能使用 Adaptive Icons 情况下使用的图标。最后我们需要的是在项目的清单文件中注明\n```\nandroid:icon=\"@mipmap/ic_launcher\"\n```\n让然有必要还有 round Icon 属性。\n这里不得不说 Google 的套路，我理解 Google 想要统一 Android 图标的想法，但是在 Android 7 时推出的 round Icon 仅仅一代版本就遭到了弃用，现在形成了 Android 7 以下使用原来的图标，形态各异，Android 7 使用只有Android 7可以使用的 round Icon，统一的圆形图标，当然不排除很多无良厂家拿着一个奇奇怪怪的图标也称呼其为 round Icon，而 Android 8开始使用自适应图标。看得出 Google 在不断的探索 Android 的未来方向，就是系统层级相对集中的管理，包括图标、电池、权限等元素，而不是任由各种产品随意设计的以前的状况，这对于 Android 是好事，对于开发者也是好事，对于热爱 Android 的也是好事。\n","source":"_posts/about-oreo-1.md","raw":"---\ntitle: Android Oreo 新特性适配 —— Adaptive Icons\ndate: 2017-09-12 21:13:09\ntags: Android\n---\n美国日全食那天，一段很短的视频带来了 Android Oreo 的正式版本，怀着激动的心情拿出了我日日把玩的 Nexus 5X，升级到了正式版本。\n流畅。\n我只能这么说，虽然不至于感受到宣传中提到的提升，但流畅的操作让我非常舒服。\n可是一切感觉在看到图标后变了。\n![图标](https://user-images.githubusercontent.com/16117136/30329107-ec88fb50-9803-11e7-8964-1e51c6f62ea6.png)\n这方方的图标看的我也方方的。7.X时代圆润的圆形图标呢！\n灰溜溜刷回了Lineage OS，并在知乎上喷了一通。<a href=\"https://www.zhihu.com/question/64259646/answer/218605483\">我的回答</a>。\n可是在 Pixel 上确是华丽丽的圆形图标，好看整齐得让人心醉。\n那么同样的 icon 为什么在不同的手机上会显示不同的样子呢。\n那就是 Android 8.0 的新特性 Adaptive Icons。\n前不久刚刚为公司的产品匹配了这一特性，踩了点坑但基本上很顺畅，写下来作为笔记。\n首先第一步，绝对是先使用 Android Studio 3.0，现在的版本是 Android Studio 3.0 Beta 4。\n然后就是要将项目的 targetSdkVersion 升级至 26 的版本，当然随之要变动的就是 compileSdkVersion 的版本，系统不会允许 compileSdkVersion 版本低于 targetSdkVersion。然后就是相应 support 库的升级，跳过不谈，这些准备工作做好后开始新图标的使用。\n![步骤1](https://user-images.githubusercontent.com/16117136/30329538-1f430dd2-9805-11e7-8a7b-88ef5d1a6bd7.png)\n点击后出现了如下的页面。\n![步骤2](https://user-images.githubusercontent.com/16117136/30330043-8b79df66-9806-11e7-9859-0d9caa6d5154.png)\n这里我们就可以看到官方提供的 Android 小人的 icon 示意图，各种形态，那么 Android 是怎么做到的呢？\n我们可以看到它是由两个图层组成的，一个叫做 Foreground 前景，一个叫做 background 背景。\n前景可以是一张 .png 图片，大小为 108 * 108，具体可以参见 Google 官方文档。\n背景是一张矢量图 drawable 或者 纯色背景，这样 Android 在启动器的要求下可以选取适当的外框。\n我们使用 Android Studio 导入图标后可以看到一个叫做 mipmap-anydpi-v26 的目录，里面是一个 xml 文件，代码如下：\n```XML\n<adaptive-icon xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <background android:drawable=\"@color/ic_launcher_background\"/>\n    <foreground android:drawable=\"@mipmap/ic_launcher_foreground\"/>\n</adaptive-icon>\n```\n点进去我们再看两张前后景图片的代码：\n背景\n```XML\n<resources>\n  <color name=\"ic_launcher_background\">#FFFFFF</color>\n</resources>\n```\n前景自然就是我们叫做 ic_launcher_background 的图片了。\n当然这个时候的项目里还有 ic_launcher，这个是在不能使用 Adaptive Icons 情况下使用的图标。最后我们需要的是在项目的清单文件中注明\n```\nandroid:icon=\"@mipmap/ic_launcher\"\n```\n让然有必要还有 round Icon 属性。\n这里不得不说 Google 的套路，我理解 Google 想要统一 Android 图标的想法，但是在 Android 7 时推出的 round Icon 仅仅一代版本就遭到了弃用，现在形成了 Android 7 以下使用原来的图标，形态各异，Android 7 使用只有Android 7可以使用的 round Icon，统一的圆形图标，当然不排除很多无良厂家拿着一个奇奇怪怪的图标也称呼其为 round Icon，而 Android 8开始使用自适应图标。看得出 Google 在不断的探索 Android 的未来方向，就是系统层级相对集中的管理，包括图标、电池、权限等元素，而不是任由各种产品随意设计的以前的状况，这对于 Android 是好事，对于开发者也是好事，对于热爱 Android 的也是好事。\n","slug":"about-oreo-1","published":1,"updated":"2018-03-19T08:18:01.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjexzddqs000b056wod3g0cuh","content":"<p>美国日全食那天，一段很短的视频带来了 Android Oreo 的正式版本，怀着激动的心情拿出了我日日把玩的 Nexus 5X，升级到了正式版本。<br>流畅。<br>我只能这么说，虽然不至于感受到宣传中提到的提升，但流畅的操作让我非常舒服。<br>可是一切感觉在看到图标后变了。<br><img src=\"https://user-images.githubusercontent.com/16117136/30329107-ec88fb50-9803-11e7-8964-1e51c6f62ea6.png\" alt=\"图标\"><br>这方方的图标看的我也方方的。7.X时代圆润的圆形图标呢！<br>灰溜溜刷回了Lineage OS，并在知乎上喷了一通。<a href=\"https://www.zhihu.com/question/64259646/answer/218605483\" target=\"_blank\" rel=\"external\">我的回答</a>。<br>可是在 Pixel 上确是华丽丽的圆形图标，好看整齐得让人心醉。<br>那么同样的 icon 为什么在不同的手机上会显示不同的样子呢。<br>那就是 Android 8.0 的新特性 Adaptive Icons。<br>前不久刚刚为公司的产品匹配了这一特性，踩了点坑但基本上很顺畅，写下来作为笔记。<br>首先第一步，绝对是先使用 Android Studio 3.0，现在的版本是 Android Studio 3.0 Beta 4。<br>然后就是要将项目的 targetSdkVersion 升级至 26 的版本，当然随之要变动的就是 compileSdkVersion 的版本，系统不会允许 compileSdkVersion 版本低于 targetSdkVersion。然后就是相应 support 库的升级，跳过不谈，这些准备工作做好后开始新图标的使用。<br><img src=\"https://user-images.githubusercontent.com/16117136/30329538-1f430dd2-9805-11e7-8a7b-88ef5d1a6bd7.png\" alt=\"步骤1\"><br>点击后出现了如下的页面。<br><img src=\"https://user-images.githubusercontent.com/16117136/30330043-8b79df66-9806-11e7-9859-0d9caa6d5154.png\" alt=\"步骤2\"><br>这里我们就可以看到官方提供的 Android 小人的 icon 示意图，各种形态，那么 Android 是怎么做到的呢？<br>我们可以看到它是由两个图层组成的，一个叫做 Foreground 前景，一个叫做 background 背景。<br>前景可以是一张 .png 图片，大小为 108 * 108，具体可以参见 Google 官方文档。<br>背景是一张矢量图 drawable 或者 纯色背景，这样 Android 在启动器的要求下可以选取适当的外框。<br>我们使用 Android Studio 导入图标后可以看到一个叫做 mipmap-anydpi-v26 的目录，里面是一个 xml 文件，代码如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">adaptive-icon</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">background</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@color/ic_launcher_background\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">foreground</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@mipmap/ic_launcher_foreground\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">adaptive-icon</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>点进去我们再看两张前后景图片的代码：<br>背景<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ic_launcher_background\"</span>&gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>前景自然就是我们叫做 ic_launcher_background 的图片了。<br>当然这个时候的项目里还有 ic_launcher，这个是在不能使用 Adaptive Icons 情况下使用的图标。最后我们需要的是在项目的清单文件中注明<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:icon=&quot;@mipmap/ic_launcher&quot;</div></pre></td></tr></table></figure></p>\n<p>让然有必要还有 round Icon 属性。<br>这里不得不说 Google 的套路，我理解 Google 想要统一 Android 图标的想法，但是在 Android 7 时推出的 round Icon 仅仅一代版本就遭到了弃用，现在形成了 Android 7 以下使用原来的图标，形态各异，Android 7 使用只有Android 7可以使用的 round Icon，统一的圆形图标，当然不排除很多无良厂家拿着一个奇奇怪怪的图标也称呼其为 round Icon，而 Android 8开始使用自适应图标。看得出 Google 在不断的探索 Android 的未来方向，就是系统层级相对集中的管理，包括图标、电池、权限等元素，而不是任由各种产品随意设计的以前的状况，这对于 Android 是好事，对于开发者也是好事，对于热爱 Android 的也是好事。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>美国日全食那天，一段很短的视频带来了 Android Oreo 的正式版本，怀着激动的心情拿出了我日日把玩的 Nexus 5X，升级到了正式版本。<br>流畅。<br>我只能这么说，虽然不至于感受到宣传中提到的提升，但流畅的操作让我非常舒服。<br>可是一切感觉在看到图标后变了。<br><img src=\"https://user-images.githubusercontent.com/16117136/30329107-ec88fb50-9803-11e7-8964-1e51c6f62ea6.png\" alt=\"图标\"><br>这方方的图标看的我也方方的。7.X时代圆润的圆形图标呢！<br>灰溜溜刷回了Lineage OS，并在知乎上喷了一通。<a href=\"https://www.zhihu.com/question/64259646/answer/218605483\" target=\"_blank\" rel=\"external\">我的回答</a>。<br>可是在 Pixel 上确是华丽丽的圆形图标，好看整齐得让人心醉。<br>那么同样的 icon 为什么在不同的手机上会显示不同的样子呢。<br>那就是 Android 8.0 的新特性 Adaptive Icons。<br>前不久刚刚为公司的产品匹配了这一特性，踩了点坑但基本上很顺畅，写下来作为笔记。<br>首先第一步，绝对是先使用 Android Studio 3.0，现在的版本是 Android Studio 3.0 Beta 4。<br>然后就是要将项目的 targetSdkVersion 升级至 26 的版本，当然随之要变动的就是 compileSdkVersion 的版本，系统不会允许 compileSdkVersion 版本低于 targetSdkVersion。然后就是相应 support 库的升级，跳过不谈，这些准备工作做好后开始新图标的使用。<br><img src=\"https://user-images.githubusercontent.com/16117136/30329538-1f430dd2-9805-11e7-8a7b-88ef5d1a6bd7.png\" alt=\"步骤1\"><br>点击后出现了如下的页面。<br><img src=\"https://user-images.githubusercontent.com/16117136/30330043-8b79df66-9806-11e7-9859-0d9caa6d5154.png\" alt=\"步骤2\"><br>这里我们就可以看到官方提供的 Android 小人的 icon 示意图，各种形态，那么 Android 是怎么做到的呢？<br>我们可以看到它是由两个图层组成的，一个叫做 Foreground 前景，一个叫做 background 背景。<br>前景可以是一张 .png 图片，大小为 108 * 108，具体可以参见 Google 官方文档。<br>背景是一张矢量图 drawable 或者 纯色背景，这样 Android 在启动器的要求下可以选取适当的外框。<br>我们使用 Android Studio 导入图标后可以看到一个叫做 mipmap-anydpi-v26 的目录，里面是一个 xml 文件，代码如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">adaptive-icon</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">background</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@color/ic_launcher_background\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">foreground</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@mipmap/ic_launcher_foreground\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">adaptive-icon</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>点进去我们再看两张前后景图片的代码：<br>背景<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ic_launcher_background\"</span>&gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>前景自然就是我们叫做 ic_launcher_background 的图片了。<br>当然这个时候的项目里还有 ic_launcher，这个是在不能使用 Adaptive Icons 情况下使用的图标。最后我们需要的是在项目的清单文件中注明<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:icon=&quot;@mipmap/ic_launcher&quot;</div></pre></td></tr></table></figure></p>\n<p>让然有必要还有 round Icon 属性。<br>这里不得不说 Google 的套路，我理解 Google 想要统一 Android 图标的想法，但是在 Android 7 时推出的 round Icon 仅仅一代版本就遭到了弃用，现在形成了 Android 7 以下使用原来的图标，形态各异，Android 7 使用只有Android 7可以使用的 round Icon，统一的圆形图标，当然不排除很多无良厂家拿着一个奇奇怪怪的图标也称呼其为 round Icon，而 Android 8开始使用自适应图标。看得出 Google 在不断的探索 Android 的未来方向，就是系统层级相对集中的管理，包括图标、电池、权限等元素，而不是任由各种产品随意设计的以前的状况，这对于 Android 是好事，对于开发者也是好事，对于热爱 Android 的也是好事。</p>\n"},{"title":"记录 Android 7.0 适配踩过的一个坑","date":"2018-02-25T08:51:08.000Z","_content":"还是上次适配 Android O 的 Adaptive Icons 时候留下的一个大坑。。。。。。\n测试的同事确认没什么问题可以发布新版本了，开开心心上线后发现我们自己的手机一更新就会崩溃，而测试的同事却没有问题，赶紧撤下上线了的版本，经检查发现原来同事的手机还运行着 Android 4.4，而我们的手机已经是 Android 8.0。\n在我们适配 Android 8.0 的时候将 compileSdkVersion 和 targetSdkVersion 的版本都升级到了 26，由此带来的问题就是没有注意到 Android 7.0 以上的新特性，具体 Android N 的全新特性可以查看[Android 7.0 行为变更](https://developer.android.com/about/versions/nougat/android-7.0-changes.html)。\n在 Android 7.0 以前，在下载新版本 apk 后，使用 Intent 安装 apk 文件的代码大致如下：\n```Java\nval intent = Intent(Intent.ACTION_VIEW)\nintent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\nval file = File(Environment.getExternalStorageDirectory() + \"/download/\" + \"app.apk\")\nval uri = Uri.fromFile(file)\nintent.setDataAndType(uri, \"application/vnd.android.package-archive\")\n```\n但在 Android N 上，为了更好的控制权限和注重安全隐私，Google 进行了全新的规定：\n```\n对于面向 Android 7.0 的应用，Android 框架执行的 StrictMode API 政策禁止在您的应用外部公开 file:// URI。如果一项包含文件 URI 的 intent 离开您的应用，则应用出现故障，并出现 FileUriExposedException 异常。\n要在应用间共享文件，您应发送一项 content:// URI，并授予 URI 临时访问权限。进行此授权的最简单方式是使用 FileProvider 类。如需了解有关权限和共享文件的详细信息，请参阅共享文件。\n```\n当然本身这项适配工作并没有难度，这里也只是记录一下适配的方法。\n首先是第一步，在清单文件中进行申明：\n```\n<manifest>\n    ...\n    <application>\n        ...\n        <provider\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:authorities=\"com.xxxx.fileprovider\"\n            android:exported=\"false\"\n            android:grantUriPermissions=\"true\">\n            ...\n        </provider>\n        ...\n    </application>\n</manifest>\n```\n接下来我们要创建resource xml file:\n```\n<paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <files-path name=\"my_docs\" path=\"docs/\"/>\n</paths>\n```\n这里需要解释一下，在paths节点内部支持以下几个子节点：\n**<root-path/> 代表设备的根目录new File(\"/\");**\n**<files-path/> 代表context.getFilesDir()**\n**<cache-path/> 代表context.getCacheDir()**\n**<external-path/> 代表Environment.getExternalStorageDirectory()**\n**<external-files-path>代表context.getExternalFilesDirs()**\n**<external-cache-path>代表getExternalCacheDirs()**\n我们可以根据位置的不同选择对应的节点。\n当然创建了文件之后我们需要在清单文件中注明。\n```\n<provider\n    android:name=\"android.support.v4.content.FileProvider\"\n    android:authorities=\"com.xxxx.fileprovider\"\n    android:exported=\"false\"\n    android:grantUriPermissions=\"true\">\n    <meta-data\n    android:name=\"android.support.FILE_PROVIDER_PATHS\"\n    android:resource=\"@xml/provider_paths\" />\n</provider>\n```\n这个时候基本的配置已经完成了，我们还需要在代码中做一个版本的判断。回到我们 install apk 的方法。\nUri 不能单纯的通过 Uri.fromFile() 函数来完成，\n```\nval uri = if (SDK_INT >= N) {\n  intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)\n  FileProvider.getUriForFile(this, \"com.xxxx.fileprovider\", file)\n  } else {\n    Uri.fromFile(file)\n  }\n```\n完成之后提交合并打包，然后再一次尝试应用内升级，一步成功～\n不得不说，以后需要多阅读 Android 的官方文档，尤其是涉及新版本适配的时候，很多坑完全是可以避免的。\n","source":"_posts/fileUri.md","raw":"---\ntitle: 记录 Android 7.0 适配踩过的一个坑\ndate: 2018-02-25 16:51:08\ntags: Android\n---\n还是上次适配 Android O 的 Adaptive Icons 时候留下的一个大坑。。。。。。\n测试的同事确认没什么问题可以发布新版本了，开开心心上线后发现我们自己的手机一更新就会崩溃，而测试的同事却没有问题，赶紧撤下上线了的版本，经检查发现原来同事的手机还运行着 Android 4.4，而我们的手机已经是 Android 8.0。\n在我们适配 Android 8.0 的时候将 compileSdkVersion 和 targetSdkVersion 的版本都升级到了 26，由此带来的问题就是没有注意到 Android 7.0 以上的新特性，具体 Android N 的全新特性可以查看[Android 7.0 行为变更](https://developer.android.com/about/versions/nougat/android-7.0-changes.html)。\n在 Android 7.0 以前，在下载新版本 apk 后，使用 Intent 安装 apk 文件的代码大致如下：\n```Java\nval intent = Intent(Intent.ACTION_VIEW)\nintent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\nval file = File(Environment.getExternalStorageDirectory() + \"/download/\" + \"app.apk\")\nval uri = Uri.fromFile(file)\nintent.setDataAndType(uri, \"application/vnd.android.package-archive\")\n```\n但在 Android N 上，为了更好的控制权限和注重安全隐私，Google 进行了全新的规定：\n```\n对于面向 Android 7.0 的应用，Android 框架执行的 StrictMode API 政策禁止在您的应用外部公开 file:// URI。如果一项包含文件 URI 的 intent 离开您的应用，则应用出现故障，并出现 FileUriExposedException 异常。\n要在应用间共享文件，您应发送一项 content:// URI，并授予 URI 临时访问权限。进行此授权的最简单方式是使用 FileProvider 类。如需了解有关权限和共享文件的详细信息，请参阅共享文件。\n```\n当然本身这项适配工作并没有难度，这里也只是记录一下适配的方法。\n首先是第一步，在清单文件中进行申明：\n```\n<manifest>\n    ...\n    <application>\n        ...\n        <provider\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:authorities=\"com.xxxx.fileprovider\"\n            android:exported=\"false\"\n            android:grantUriPermissions=\"true\">\n            ...\n        </provider>\n        ...\n    </application>\n</manifest>\n```\n接下来我们要创建resource xml file:\n```\n<paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <files-path name=\"my_docs\" path=\"docs/\"/>\n</paths>\n```\n这里需要解释一下，在paths节点内部支持以下几个子节点：\n**<root-path/> 代表设备的根目录new File(\"/\");**\n**<files-path/> 代表context.getFilesDir()**\n**<cache-path/> 代表context.getCacheDir()**\n**<external-path/> 代表Environment.getExternalStorageDirectory()**\n**<external-files-path>代表context.getExternalFilesDirs()**\n**<external-cache-path>代表getExternalCacheDirs()**\n我们可以根据位置的不同选择对应的节点。\n当然创建了文件之后我们需要在清单文件中注明。\n```\n<provider\n    android:name=\"android.support.v4.content.FileProvider\"\n    android:authorities=\"com.xxxx.fileprovider\"\n    android:exported=\"false\"\n    android:grantUriPermissions=\"true\">\n    <meta-data\n    android:name=\"android.support.FILE_PROVIDER_PATHS\"\n    android:resource=\"@xml/provider_paths\" />\n</provider>\n```\n这个时候基本的配置已经完成了，我们还需要在代码中做一个版本的判断。回到我们 install apk 的方法。\nUri 不能单纯的通过 Uri.fromFile() 函数来完成，\n```\nval uri = if (SDK_INT >= N) {\n  intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)\n  FileProvider.getUriForFile(this, \"com.xxxx.fileprovider\", file)\n  } else {\n    Uri.fromFile(file)\n  }\n```\n完成之后提交合并打包，然后再一次尝试应用内升级，一步成功～\n不得不说，以后需要多阅读 Android 的官方文档，尤其是涉及新版本适配的时候，很多坑完全是可以避免的。\n","slug":"fileUri","published":1,"updated":"2018-03-19T08:18:01.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjexzddqt000e056we89fkygr","content":"<p>还是上次适配 Android O 的 Adaptive Icons 时候留下的一个大坑。。。。。。<br>测试的同事确认没什么问题可以发布新版本了，开开心心上线后发现我们自己的手机一更新就会崩溃，而测试的同事却没有问题，赶紧撤下上线了的版本，经检查发现原来同事的手机还运行着 Android 4.4，而我们的手机已经是 Android 8.0。<br>在我们适配 Android 8.0 的时候将 compileSdkVersion 和 targetSdkVersion 的版本都升级到了 26，由此带来的问题就是没有注意到 Android 7.0 以上的新特性，具体 Android N 的全新特性可以查看<a href=\"https://developer.android.com/about/versions/nougat/android-7.0-changes.html\" target=\"_blank\" rel=\"external\">Android 7.0 行为变更</a>。<br>在 Android 7.0 以前，在下载新版本 apk 后，使用 Intent 安装 apk 文件的代码大致如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">val intent = Intent(Intent.ACTION_VIEW)</div><div class=\"line\">intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK</div><div class=\"line\">val file = File(Environment.getExternalStorageDirectory() + <span class=\"string\">\"/download/\"</span> + <span class=\"string\">\"app.apk\"</span>)</div><div class=\"line\">val uri = Uri.fromFile(file)</div><div class=\"line\">intent.setDataAndType(uri, <span class=\"string\">\"application/vnd.android.package-archive\"</span>)</div></pre></td></tr></table></figure></p>\n<p>但在 Android N 上，为了更好的控制权限和注重安全隐私，Google 进行了全新的规定：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">对于面向 Android 7.0 的应用，Android 框架执行的 StrictMode API 政策禁止在您的应用外部公开 file:// URI。如果一项包含文件 URI 的 intent 离开您的应用，则应用出现故障，并出现 FileUriExposedException 异常。</div><div class=\"line\">要在应用间共享文件，您应发送一项 content:// URI，并授予 URI 临时访问权限。进行此授权的最简单方式是使用 FileProvider 类。如需了解有关权限和共享文件的详细信息，请参阅共享文件。</div></pre></td></tr></table></figure></p>\n<p>当然本身这项适配工作并没有难度，这里也只是记录一下适配的方法。<br>首先是第一步，在清单文件中进行申明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;manifest&gt;</div><div class=\"line\">    ...</div><div class=\"line\">    &lt;application&gt;</div><div class=\"line\">        ...</div><div class=\"line\">        &lt;provider</div><div class=\"line\">            android:name=&quot;android.support.v4.content.FileProvider&quot;</div><div class=\"line\">            android:authorities=&quot;com.xxxx.fileprovider&quot;</div><div class=\"line\">            android:exported=&quot;false&quot;</div><div class=\"line\">            android:grantUriPermissions=&quot;true&quot;&gt;</div><div class=\"line\">            ...</div><div class=\"line\">        &lt;/provider&gt;</div><div class=\"line\">        ...</div><div class=\"line\">    &lt;/application&gt;</div><div class=\"line\">&lt;/manifest&gt;</div></pre></td></tr></table></figure></p>\n<p>接下来我们要创建resource xml file:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;paths xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">    &lt;files-path name=&quot;my_docs&quot; path=&quot;docs/&quot;/&gt;</div><div class=\"line\">&lt;/paths&gt;</div></pre></td></tr></table></figure></p>\n<p>这里需要解释一下，在paths节点内部支持以下几个子节点：<br><strong><root-path> 代表设备的根目录new File(“/“);</root-path></strong><br><strong><files-path> 代表context.getFilesDir()</files-path></strong><br><strong><cache-path> 代表context.getCacheDir()</cache-path></strong><br><strong><external-path> 代表Environment.getExternalStorageDirectory()</external-path></strong><br><strong><external-files-path>代表context.getExternalFilesDirs()</external-files-path></strong><br><strong><external-cache-path>代表getExternalCacheDirs()</external-cache-path></strong><br>我们可以根据位置的不同选择对应的节点。<br>当然创建了文件之后我们需要在清单文件中注明。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;provider</div><div class=\"line\">    android:name=&quot;android.support.v4.content.FileProvider&quot;</div><div class=\"line\">    android:authorities=&quot;com.xxxx.fileprovider&quot;</div><div class=\"line\">    android:exported=&quot;false&quot;</div><div class=\"line\">    android:grantUriPermissions=&quot;true&quot;&gt;</div><div class=\"line\">    &lt;meta-data</div><div class=\"line\">    android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;</div><div class=\"line\">    android:resource=&quot;@xml/provider_paths&quot; /&gt;</div><div class=\"line\">&lt;/provider&gt;</div></pre></td></tr></table></figure></p>\n<p>这个时候基本的配置已经完成了，我们还需要在代码中做一个版本的判断。回到我们 install apk 的方法。<br>Uri 不能单纯的通过 Uri.fromFile() 函数来完成，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">val uri = if (SDK_INT &gt;= N) &#123;</div><div class=\"line\">  intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)</div><div class=\"line\">  FileProvider.getUriForFile(this, &quot;com.xxxx.fileprovider&quot;, file)</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    Uri.fromFile(file)</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>完成之后提交合并打包，然后再一次尝试应用内升级，一步成功～<br>不得不说，以后需要多阅读 Android 的官方文档，尤其是涉及新版本适配的时候，很多坑完全是可以避免的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>还是上次适配 Android O 的 Adaptive Icons 时候留下的一个大坑。。。。。。<br>测试的同事确认没什么问题可以发布新版本了，开开心心上线后发现我们自己的手机一更新就会崩溃，而测试的同事却没有问题，赶紧撤下上线了的版本，经检查发现原来同事的手机还运行着 Android 4.4，而我们的手机已经是 Android 8.0。<br>在我们适配 Android 8.0 的时候将 compileSdkVersion 和 targetSdkVersion 的版本都升级到了 26，由此带来的问题就是没有注意到 Android 7.0 以上的新特性，具体 Android N 的全新特性可以查看<a href=\"https://developer.android.com/about/versions/nougat/android-7.0-changes.html\" target=\"_blank\" rel=\"external\">Android 7.0 行为变更</a>。<br>在 Android 7.0 以前，在下载新版本 apk 后，使用 Intent 安装 apk 文件的代码大致如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">val intent = Intent(Intent.ACTION_VIEW)</div><div class=\"line\">intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK</div><div class=\"line\">val file = File(Environment.getExternalStorageDirectory() + <span class=\"string\">\"/download/\"</span> + <span class=\"string\">\"app.apk\"</span>)</div><div class=\"line\">val uri = Uri.fromFile(file)</div><div class=\"line\">intent.setDataAndType(uri, <span class=\"string\">\"application/vnd.android.package-archive\"</span>)</div></pre></td></tr></table></figure></p>\n<p>但在 Android N 上，为了更好的控制权限和注重安全隐私，Google 进行了全新的规定：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">对于面向 Android 7.0 的应用，Android 框架执行的 StrictMode API 政策禁止在您的应用外部公开 file:// URI。如果一项包含文件 URI 的 intent 离开您的应用，则应用出现故障，并出现 FileUriExposedException 异常。</div><div class=\"line\">要在应用间共享文件，您应发送一项 content:// URI，并授予 URI 临时访问权限。进行此授权的最简单方式是使用 FileProvider 类。如需了解有关权限和共享文件的详细信息，请参阅共享文件。</div></pre></td></tr></table></figure></p>\n<p>当然本身这项适配工作并没有难度，这里也只是记录一下适配的方法。<br>首先是第一步，在清单文件中进行申明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;manifest&gt;</div><div class=\"line\">    ...</div><div class=\"line\">    &lt;application&gt;</div><div class=\"line\">        ...</div><div class=\"line\">        &lt;provider</div><div class=\"line\">            android:name=&quot;android.support.v4.content.FileProvider&quot;</div><div class=\"line\">            android:authorities=&quot;com.xxxx.fileprovider&quot;</div><div class=\"line\">            android:exported=&quot;false&quot;</div><div class=\"line\">            android:grantUriPermissions=&quot;true&quot;&gt;</div><div class=\"line\">            ...</div><div class=\"line\">        &lt;/provider&gt;</div><div class=\"line\">        ...</div><div class=\"line\">    &lt;/application&gt;</div><div class=\"line\">&lt;/manifest&gt;</div></pre></td></tr></table></figure></p>\n<p>接下来我们要创建resource xml file:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;paths xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">    &lt;files-path name=&quot;my_docs&quot; path=&quot;docs/&quot;/&gt;</div><div class=\"line\">&lt;/paths&gt;</div></pre></td></tr></table></figure></p>\n<p>这里需要解释一下，在paths节点内部支持以下几个子节点：<br><strong><root-path> 代表设备的根目录new File(“/“);</root-path></strong><br><strong><files-path> 代表context.getFilesDir()</files-path></strong><br><strong><cache-path> 代表context.getCacheDir()</cache-path></strong><br><strong><external-path> 代表Environment.getExternalStorageDirectory()</external-path></strong><br><strong><external-files-path>代表context.getExternalFilesDirs()</external-files-path></strong><br><strong><external-cache-path>代表getExternalCacheDirs()</external-cache-path></strong><br>我们可以根据位置的不同选择对应的节点。<br>当然创建了文件之后我们需要在清单文件中注明。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;provider</div><div class=\"line\">    android:name=&quot;android.support.v4.content.FileProvider&quot;</div><div class=\"line\">    android:authorities=&quot;com.xxxx.fileprovider&quot;</div><div class=\"line\">    android:exported=&quot;false&quot;</div><div class=\"line\">    android:grantUriPermissions=&quot;true&quot;&gt;</div><div class=\"line\">    &lt;meta-data</div><div class=\"line\">    android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;</div><div class=\"line\">    android:resource=&quot;@xml/provider_paths&quot; /&gt;</div><div class=\"line\">&lt;/provider&gt;</div></pre></td></tr></table></figure></p>\n<p>这个时候基本的配置已经完成了，我们还需要在代码中做一个版本的判断。回到我们 install apk 的方法。<br>Uri 不能单纯的通过 Uri.fromFile() 函数来完成，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">val uri = if (SDK_INT &gt;= N) &#123;</div><div class=\"line\">  intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)</div><div class=\"line\">  FileProvider.getUriForFile(this, &quot;com.xxxx.fileprovider&quot;, file)</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    Uri.fromFile(file)</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>完成之后提交合并打包，然后再一次尝试应用内升级，一步成功～<br>不得不说，以后需要多阅读 Android 的官方文档，尤其是涉及新版本适配的时候，很多坑完全是可以避免的。</p>\n"},{"title":"使用原生取代 WebView —— 图文混排 1","date":"2018-02-22T11:30:57.000Z","_content":"这篇总结博客想写很久了，一直没空动笔，很羞愧。今天终于有空坐下来，2018年的第一篇技术总结，写写2017年下半年花了很多心思做的使用原生取代 WebView，也就是原生实现图文混排及交互的功能。\n我们公司是做英语作业平台的，所以我们的核心功能就是试卷，学生们通过我们的软件完成填空题，选择题，文本题等各种题型。在以往我们的试卷部分是通过 WebView 由前端开发的同事写好交互，我们通过调用 JS 代码来实现功能，但我一直对于这样的混合开发保持怀疑，毕竟对于手机，尤其是碎片化严重的 Android 来说，不同的系统版本不同的厂家甚至不同的用户习惯都会带来 WebView 性能差甚至加载出现问题的情况，所以我们的项目实现原生图文混排及交互的功能势在必行。\n原生图文混排及交互，也就是富文本。iOS 的同事在拿到这个任务的时候选择了 iOS 著名的富文本库 [YYText](https://github.com/ibireme/YYText)，而负责 Android 端的我选择了使用原生 TextView 来实现，使用 SpannableString 以及 SpannableStringBuilder 来构造。\nSpannableString 与 SpannableStringBuilder 是非常强大的，我们对于 TextView 所想实现的所有功能和样式几乎都可以通过它来完成。最简单的例子就是多种颜色的一段文字。\n如图所示。\n![多种颜色文字](https://ws1.sinaimg.cn/large/af31670dgy1fople7zmr8j20ma14u75o.jpg)\n如果是针对整个 TextView 来设置颜色是无法达到这样的效果的，我们需要用 SpannableString 设置不同的 span 后拼接，这样可以达到这样的效果。\n```java\n        val textView = findViewById<TextView>(R.id.sample_text)\n        val spannableStringBuilder = SpannableStringBuilder()\n\n        val blueString = SpannableString(\"Hello\")\n        blueString.setSpan(ForegroundColorSpan(ContextCompat.getColor(this, R.color.colorPrimary)), 0, blueString.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\n        spannableStringBuilder.append(blueString)\n\n        val redString = SpannableString(\"Hello\")\n        redString.setSpan(ForegroundColorSpan(ContextCompat.getColor(this, R.color.colorAccent)), 0, redString.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\n        spannableStringBuilder.append(redString)\n\n        textView.text = spannableStringBuilder\n```\n这里需要提及的是 setSpan 这个方法。\n```Java\n        setSpan(Object what, int start, int end, int flags)\n```\n这里备注一下几个参数对应的含义。\n第一个参数 Object what 指的是我们需要设置的 Span 的类型，如我们显示字体颜色的 ForegroundColorSpan；\n第二个参数 int start 以及第三个参数 int end 指的是我们对于这段 spannableString 设置样式的起始位置；\n而第三个参数也就是 flag 的取值如下\n```\nSpannable. SPAN_INCLUSIVE_EXCLUSIVE：前面包括，后面不包括，即在文本前插入新的文本会应用该样式，而在文本后插入新文本不会应用该样式\nSpannable. SPAN_INCLUSIVE_INCLUSIVE：前面包括，后面包括，即在文本前插入新的文本会应用该样式，而在文本后插入新文本也会应用该样式\nSpannable. SPAN_EXCLUSIVE_EXCLUSIVE：前面不包括，后面不包括\nSpannable. SPAN_EXCLUSIVE_INCLUSIVE：前面不包括，后面包括\n```\n这样就可以基本实现通过设置 span 来达到不同的效果。\n这是使用 span 的总结第一篇，为自己后面列个提纲\n1. ImageSpan 包括 本地图片用法 网络图片用法 Data Base64图片加载方法\n2. clickableSpan\n3. 特殊化的自定义 Span\n4. 如何在 TextView 指定位置插入 View\n","source":"_posts/html2original.md","raw":"---\ntitle: 使用原生取代 WebView —— 图文混排 1\ndate: 2018-02-22 19:30:57\ntags: Android\n---\n这篇总结博客想写很久了，一直没空动笔，很羞愧。今天终于有空坐下来，2018年的第一篇技术总结，写写2017年下半年花了很多心思做的使用原生取代 WebView，也就是原生实现图文混排及交互的功能。\n我们公司是做英语作业平台的，所以我们的核心功能就是试卷，学生们通过我们的软件完成填空题，选择题，文本题等各种题型。在以往我们的试卷部分是通过 WebView 由前端开发的同事写好交互，我们通过调用 JS 代码来实现功能，但我一直对于这样的混合开发保持怀疑，毕竟对于手机，尤其是碎片化严重的 Android 来说，不同的系统版本不同的厂家甚至不同的用户习惯都会带来 WebView 性能差甚至加载出现问题的情况，所以我们的项目实现原生图文混排及交互的功能势在必行。\n原生图文混排及交互，也就是富文本。iOS 的同事在拿到这个任务的时候选择了 iOS 著名的富文本库 [YYText](https://github.com/ibireme/YYText)，而负责 Android 端的我选择了使用原生 TextView 来实现，使用 SpannableString 以及 SpannableStringBuilder 来构造。\nSpannableString 与 SpannableStringBuilder 是非常强大的，我们对于 TextView 所想实现的所有功能和样式几乎都可以通过它来完成。最简单的例子就是多种颜色的一段文字。\n如图所示。\n![多种颜色文字](https://ws1.sinaimg.cn/large/af31670dgy1fople7zmr8j20ma14u75o.jpg)\n如果是针对整个 TextView 来设置颜色是无法达到这样的效果的，我们需要用 SpannableString 设置不同的 span 后拼接，这样可以达到这样的效果。\n```java\n        val textView = findViewById<TextView>(R.id.sample_text)\n        val spannableStringBuilder = SpannableStringBuilder()\n\n        val blueString = SpannableString(\"Hello\")\n        blueString.setSpan(ForegroundColorSpan(ContextCompat.getColor(this, R.color.colorPrimary)), 0, blueString.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\n        spannableStringBuilder.append(blueString)\n\n        val redString = SpannableString(\"Hello\")\n        redString.setSpan(ForegroundColorSpan(ContextCompat.getColor(this, R.color.colorAccent)), 0, redString.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\n        spannableStringBuilder.append(redString)\n\n        textView.text = spannableStringBuilder\n```\n这里需要提及的是 setSpan 这个方法。\n```Java\n        setSpan(Object what, int start, int end, int flags)\n```\n这里备注一下几个参数对应的含义。\n第一个参数 Object what 指的是我们需要设置的 Span 的类型，如我们显示字体颜色的 ForegroundColorSpan；\n第二个参数 int start 以及第三个参数 int end 指的是我们对于这段 spannableString 设置样式的起始位置；\n而第三个参数也就是 flag 的取值如下\n```\nSpannable. SPAN_INCLUSIVE_EXCLUSIVE：前面包括，后面不包括，即在文本前插入新的文本会应用该样式，而在文本后插入新文本不会应用该样式\nSpannable. SPAN_INCLUSIVE_INCLUSIVE：前面包括，后面包括，即在文本前插入新的文本会应用该样式，而在文本后插入新文本也会应用该样式\nSpannable. SPAN_EXCLUSIVE_EXCLUSIVE：前面不包括，后面不包括\nSpannable. SPAN_EXCLUSIVE_INCLUSIVE：前面不包括，后面包括\n```\n这样就可以基本实现通过设置 span 来达到不同的效果。\n这是使用 span 的总结第一篇，为自己后面列个提纲\n1. ImageSpan 包括 本地图片用法 网络图片用法 Data Base64图片加载方法\n2. clickableSpan\n3. 特殊化的自定义 Span\n4. 如何在 TextView 指定位置插入 View\n","slug":"html2original","published":1,"updated":"2018-03-19T08:18:01.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjexzddqu000g056wlo0kjx65","content":"<p>这篇总结博客想写很久了，一直没空动笔，很羞愧。今天终于有空坐下来，2018年的第一篇技术总结，写写2017年下半年花了很多心思做的使用原生取代 WebView，也就是原生实现图文混排及交互的功能。<br>我们公司是做英语作业平台的，所以我们的核心功能就是试卷，学生们通过我们的软件完成填空题，选择题，文本题等各种题型。在以往我们的试卷部分是通过 WebView 由前端开发的同事写好交互，我们通过调用 JS 代码来实现功能，但我一直对于这样的混合开发保持怀疑，毕竟对于手机，尤其是碎片化严重的 Android 来说，不同的系统版本不同的厂家甚至不同的用户习惯都会带来 WebView 性能差甚至加载出现问题的情况，所以我们的项目实现原生图文混排及交互的功能势在必行。<br>原生图文混排及交互，也就是富文本。iOS 的同事在拿到这个任务的时候选择了 iOS 著名的富文本库 <a href=\"https://github.com/ibireme/YYText\" target=\"_blank\" rel=\"external\">YYText</a>，而负责 Android 端的我选择了使用原生 TextView 来实现，使用 SpannableString 以及 SpannableStringBuilder 来构造。<br>SpannableString 与 SpannableStringBuilder 是非常强大的，我们对于 TextView 所想实现的所有功能和样式几乎都可以通过它来完成。最简单的例子就是多种颜色的一段文字。<br>如图所示。<br><img src=\"https://ws1.sinaimg.cn/large/af31670dgy1fople7zmr8j20ma14u75o.jpg\" alt=\"多种颜色文字\"><br>如果是针对整个 TextView 来设置颜色是无法达到这样的效果的，我们需要用 SpannableString 设置不同的 span 后拼接，这样可以达到这样的效果。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">val textView = findViewById&lt;TextView&gt;(R.id.sample_text)</div><div class=\"line\">val spannableStringBuilder = SpannableStringBuilder()</div><div class=\"line\"></div><div class=\"line\">val blueString = SpannableString(<span class=\"string\">\"Hello\"</span>)</div><div class=\"line\">blueString.setSpan(ForegroundColorSpan(ContextCompat.getColor(<span class=\"keyword\">this</span>, R.color.colorPrimary)), <span class=\"number\">0</span>, blueString.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)</div><div class=\"line\">spannableStringBuilder.append(blueString)</div><div class=\"line\"></div><div class=\"line\">val redString = SpannableString(<span class=\"string\">\"Hello\"</span>)</div><div class=\"line\">redString.setSpan(ForegroundColorSpan(ContextCompat.getColor(<span class=\"keyword\">this</span>, R.color.colorAccent)), <span class=\"number\">0</span>, redString.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)</div><div class=\"line\">spannableStringBuilder.append(redString)</div><div class=\"line\"></div><div class=\"line\">textView.text = spannableStringBuilder</div></pre></td></tr></table></figure></p>\n<p>这里需要提及的是 setSpan 这个方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">setSpan(Object what, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, <span class=\"keyword\">int</span> flags)</div></pre></td></tr></table></figure></p>\n<p>这里备注一下几个参数对应的含义。<br>第一个参数 Object what 指的是我们需要设置的 Span 的类型，如我们显示字体颜色的 ForegroundColorSpan；<br>第二个参数 int start 以及第三个参数 int end 指的是我们对于这段 spannableString 设置样式的起始位置；<br>而第三个参数也就是 flag 的取值如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Spannable. SPAN_INCLUSIVE_EXCLUSIVE：前面包括，后面不包括，即在文本前插入新的文本会应用该样式，而在文本后插入新文本不会应用该样式</div><div class=\"line\">Spannable. SPAN_INCLUSIVE_INCLUSIVE：前面包括，后面包括，即在文本前插入新的文本会应用该样式，而在文本后插入新文本也会应用该样式</div><div class=\"line\">Spannable. SPAN_EXCLUSIVE_EXCLUSIVE：前面不包括，后面不包括</div><div class=\"line\">Spannable. SPAN_EXCLUSIVE_INCLUSIVE：前面不包括，后面包括</div></pre></td></tr></table></figure></p>\n<p>这样就可以基本实现通过设置 span 来达到不同的效果。<br>这是使用 span 的总结第一篇，为自己后面列个提纲</p>\n<ol>\n<li>ImageSpan 包括 本地图片用法 网络图片用法 Data Base64图片加载方法</li>\n<li>clickableSpan</li>\n<li>特殊化的自定义 Span</li>\n<li>如何在 TextView 指定位置插入 View</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>这篇总结博客想写很久了，一直没空动笔，很羞愧。今天终于有空坐下来，2018年的第一篇技术总结，写写2017年下半年花了很多心思做的使用原生取代 WebView，也就是原生实现图文混排及交互的功能。<br>我们公司是做英语作业平台的，所以我们的核心功能就是试卷，学生们通过我们的软件完成填空题，选择题，文本题等各种题型。在以往我们的试卷部分是通过 WebView 由前端开发的同事写好交互，我们通过调用 JS 代码来实现功能，但我一直对于这样的混合开发保持怀疑，毕竟对于手机，尤其是碎片化严重的 Android 来说，不同的系统版本不同的厂家甚至不同的用户习惯都会带来 WebView 性能差甚至加载出现问题的情况，所以我们的项目实现原生图文混排及交互的功能势在必行。<br>原生图文混排及交互，也就是富文本。iOS 的同事在拿到这个任务的时候选择了 iOS 著名的富文本库 <a href=\"https://github.com/ibireme/YYText\" target=\"_blank\" rel=\"external\">YYText</a>，而负责 Android 端的我选择了使用原生 TextView 来实现，使用 SpannableString 以及 SpannableStringBuilder 来构造。<br>SpannableString 与 SpannableStringBuilder 是非常强大的，我们对于 TextView 所想实现的所有功能和样式几乎都可以通过它来完成。最简单的例子就是多种颜色的一段文字。<br>如图所示。<br><img src=\"https://ws1.sinaimg.cn/large/af31670dgy1fople7zmr8j20ma14u75o.jpg\" alt=\"多种颜色文字\"><br>如果是针对整个 TextView 来设置颜色是无法达到这样的效果的，我们需要用 SpannableString 设置不同的 span 后拼接，这样可以达到这样的效果。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">val textView = findViewById&lt;TextView&gt;(R.id.sample_text)</div><div class=\"line\">val spannableStringBuilder = SpannableStringBuilder()</div><div class=\"line\"></div><div class=\"line\">val blueString = SpannableString(<span class=\"string\">\"Hello\"</span>)</div><div class=\"line\">blueString.setSpan(ForegroundColorSpan(ContextCompat.getColor(<span class=\"keyword\">this</span>, R.color.colorPrimary)), <span class=\"number\">0</span>, blueString.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)</div><div class=\"line\">spannableStringBuilder.append(blueString)</div><div class=\"line\"></div><div class=\"line\">val redString = SpannableString(<span class=\"string\">\"Hello\"</span>)</div><div class=\"line\">redString.setSpan(ForegroundColorSpan(ContextCompat.getColor(<span class=\"keyword\">this</span>, R.color.colorAccent)), <span class=\"number\">0</span>, redString.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)</div><div class=\"line\">spannableStringBuilder.append(redString)</div><div class=\"line\"></div><div class=\"line\">textView.text = spannableStringBuilder</div></pre></td></tr></table></figure></p>\n<p>这里需要提及的是 setSpan 这个方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">setSpan(Object what, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, <span class=\"keyword\">int</span> flags)</div></pre></td></tr></table></figure></p>\n<p>这里备注一下几个参数对应的含义。<br>第一个参数 Object what 指的是我们需要设置的 Span 的类型，如我们显示字体颜色的 ForegroundColorSpan；<br>第二个参数 int start 以及第三个参数 int end 指的是我们对于这段 spannableString 设置样式的起始位置；<br>而第三个参数也就是 flag 的取值如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Spannable. SPAN_INCLUSIVE_EXCLUSIVE：前面包括，后面不包括，即在文本前插入新的文本会应用该样式，而在文本后插入新文本不会应用该样式</div><div class=\"line\">Spannable. SPAN_INCLUSIVE_INCLUSIVE：前面包括，后面包括，即在文本前插入新的文本会应用该样式，而在文本后插入新文本也会应用该样式</div><div class=\"line\">Spannable. SPAN_EXCLUSIVE_EXCLUSIVE：前面不包括，后面不包括</div><div class=\"line\">Spannable. SPAN_EXCLUSIVE_INCLUSIVE：前面不包括，后面包括</div></pre></td></tr></table></figure></p>\n<p>这样就可以基本实现通过设置 span 来达到不同的效果。<br>这是使用 span 的总结第一篇，为自己后面列个提纲</p>\n<ol>\n<li>ImageSpan 包括 本地图片用法 网络图片用法 Data Base64图片加载方法</li>\n<li>clickableSpan</li>\n<li>特殊化的自定义 Span</li>\n<li>如何在 TextView 指定位置插入 View</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjexzddqg0000056wiluz0rbs","tag_id":"cjexzddqm0003056w0mncoipf","_id":"cjexzddqq0008056w80jehd2b"},{"post_id":"cjexzddqp0006056w7raa77eu","tag_id":"cjexzddqm0003056w0mncoipf","_id":"cjexzddqr000a056wfp364g77"},{"post_id":"cjexzddqk0002056wkorbuwzf","tag_id":"cjexzddqm0003056w0mncoipf","_id":"cjexzddqt000d056wyawqmoam"},{"post_id":"cjexzddqs000b056wod3g0cuh","tag_id":"cjexzddqm0003056w0mncoipf","_id":"cjexzddqu000f056wyb06xhk8"},{"post_id":"cjexzddqt000e056we89fkygr","tag_id":"cjexzddqm0003056w0mncoipf","_id":"cjexzddqv000i056wto5l7gcz"},{"post_id":"cjexzddqn0004056w2bj2b6jo","tag_id":"cjexzddqm0003056w0mncoipf","_id":"cjexzddqw000j056wwpi79eii"},{"post_id":"cjexzddqu000g056wlo0kjx65","tag_id":"cjexzddqm0003056w0mncoipf","_id":"cjexzddqw000l056wr0ejp2mf"},{"post_id":"cjexzddqo0005056ww4ks1nxy","tag_id":"cjexzddqv000h056wkzwac883","_id":"cjexzddqw000m056wfel65xid"},{"post_id":"cjexzddqq0009056wqwm9wawb","tag_id":"cjexzddqw000k056wxe0991oc","_id":"cjexzddqx000n056wvvcgd9g2"}],"Tag":[{"name":"Android","_id":"cjexzddqm0003056w0mncoipf"},{"name":"Career","_id":"cjexzddqv000h056wkzwac883"},{"name":"java","_id":"cjexzddqw000k056wxe0991oc"}]}}